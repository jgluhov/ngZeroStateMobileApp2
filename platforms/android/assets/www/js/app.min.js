!function e(n,t,r){function o(s,u){if(!t[s]){if(!n[s]){var f="function"==typeof require&&require;if(!u&&f)return f(s,!0);if(i)return i(s,!0);throw new Error("Cannot find module '"+s+"'")}var a=t[s]={exports:{}};n[s][0].call(a.exports,function(e){var t=n[s][1][e];return o(t?t:e)},a,a.exports,e,n,t,r)}return t[s].exports}for(var i="function"==typeof require&&require,s=0;s<r.length;s++)o(r[s]);return o}({1:[function(e,n,t){(function(n,r,o,i,s,u,f,a,l){function o(e,n,t){if(!(this instanceof o))return new o(e,n,t);var r=typeof e;if("base64"===n&&"string"===r)for(e=N(e);e.length%4!==0;)e+="=";var i;if("number"===r)i=F(e);else if("string"===r)i=o.byteLength(e,n);else{if("object"!==r)throw new Error("First argument needs to be a number, array or string.");i=F(e.length)}var s;o._useTypedArrays?s=o._augment(new Uint8Array(i)):(s=this,s.length=i,s._isBuffer=!0);var u;if(o._useTypedArrays&&"number"==typeof e.byteLength)s._set(e);else if(z(e))for(u=0;i>u;u++)o.isBuffer(e)?s[u]=e.readUInt8(u):s[u]=e[u];else if("string"===r)s.write(e,0,n);else if("number"===r&&!o._useTypedArrays&&!t)for(u=0;i>u;u++)s[u]=0;return s}function c(e,n,t,r){t=Number(t)||0;var i=e.length-t;r?(r=Number(r),r>i&&(r=i)):r=i;var s=n.length;G(s%2===0,"Invalid hex string"),r>s/2&&(r=s/2);for(var u=0;r>u;u++){var f=parseInt(n.substr(2*u,2),16);G(!isNaN(f),"Invalid hex string"),e[t+u]=f}return o._charsWritten=2*u,u}function d(e,n,t,r){var i=o._charsWritten=J(q(n),e,t,r);return i}function g(e,n,t,r){var i=o._charsWritten=J(O(n),e,t,r);return i}function h(e,n,t,r){return g(e,n,t,r)}function p(e,n,t,r){var i=o._charsWritten=J(R(n),e,t,r);return i}function m(e,n,t,r){var i=o._charsWritten=J(W(n),e,t,r);return i}function w(e,n,t){return 0===n&&t===e.length?K.fromByteArray(e):K.fromByteArray(e.slice(n,t))}function y(e,n,t){var r="",o="";t=Math.min(e.length,t);for(var i=n;t>i;i++)e[i]<=127?(r+=H(o)+String.fromCharCode(e[i]),o=""):o+="%"+e[i].toString(16);return r+H(o)}function b(e,n,t){var r="";t=Math.min(e.length,t);for(var o=n;t>o;o++)r+=String.fromCharCode(e[o]);return r}function v(e,n,t){return b(e,n,t)}function A(e,n,t){var r=e.length;(!n||0>n)&&(n=0),(!t||0>t||t>r)&&(t=r);for(var o="",i=n;t>i;i++)o+=P(e[i]);return o}function E(e,n,t){for(var r=e.slice(n,t),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function I(e,n,t,r){r||(G("boolean"==typeof t,"missing or invalid endian"),G(void 0!==n&&null!==n,"missing offset"),G(n+1<e.length,"Trying to read beyond buffer length"));var o=e.length;if(!(n>=o)){var i;return t?(i=e[n],o>n+1&&(i|=e[n+1]<<8)):(i=e[n]<<8,o>n+1&&(i|=e[n+1])),i}}function B(e,n,t,r){r||(G("boolean"==typeof t,"missing or invalid endian"),G(void 0!==n&&null!==n,"missing offset"),G(n+3<e.length,"Trying to read beyond buffer length"));var o=e.length;if(!(n>=o)){var i;return t?(o>n+2&&(i=e[n+2]<<16),o>n+1&&(i|=e[n+1]<<8),i|=e[n],o>n+3&&(i+=e[n+3]<<24>>>0)):(o>n+1&&(i=e[n+1]<<16),o>n+2&&(i|=e[n+2]<<8),o>n+3&&(i|=e[n+3]),i+=e[n]<<24>>>0),i}}function U(e,n,t,r){r||(G("boolean"==typeof t,"missing or invalid endian"),G(void 0!==n&&null!==n,"missing offset"),G(n+1<e.length,"Trying to read beyond buffer length"));var o=e.length;if(!(n>=o)){var i=I(e,n,t,!0),s=32768&i;return s?-1*(65535-i+1):i}}function M(e,n,t,r){r||(G("boolean"==typeof t,"missing or invalid endian"),G(void 0!==n&&null!==n,"missing offset"),G(n+3<e.length,"Trying to read beyond buffer length"));var o=e.length;if(!(n>=o)){var i=B(e,n,t,!0),s=2147483648&i;return s?-1*(4294967295-i+1):i}}function _(e,n,t,r){return r||(G("boolean"==typeof t,"missing or invalid endian"),G(n+3<e.length,"Trying to read beyond buffer length")),Q.read(e,n,t,23,4)}function C(e,n,t,r){return r||(G("boolean"==typeof t,"missing or invalid endian"),G(n+7<e.length,"Trying to read beyond buffer length")),Q.read(e,n,t,52,8)}function S(e,n,t,r,o){o||(G(void 0!==n&&null!==n,"missing value"),G("boolean"==typeof r,"missing or invalid endian"),G(void 0!==t&&null!==t,"missing offset"),G(t+1<e.length,"trying to write beyond buffer length"),X(n,65535));var i=e.length;if(!(t>=i))for(var s=0,u=Math.min(i-t,2);u>s;s++)e[t+s]=(n&255<<8*(r?s:1-s))>>>8*(r?s:1-s)}function L(e,n,t,r,o){o||(G(void 0!==n&&null!==n,"missing value"),G("boolean"==typeof r,"missing or invalid endian"),G(void 0!==t&&null!==t,"missing offset"),G(t+3<e.length,"trying to write beyond buffer length"),X(n,4294967295));var i=e.length;if(!(t>=i))for(var s=0,u=Math.min(i-t,4);u>s;s++)e[t+s]=n>>>8*(r?s:3-s)&255}function x(e,n,t,r,o){o||(G(void 0!==n&&null!==n,"missing value"),G("boolean"==typeof r,"missing or invalid endian"),G(void 0!==t&&null!==t,"missing offset"),G(t+1<e.length,"Trying to write beyond buffer length"),Y(n,32767,-32768));var i=e.length;t>=i||(n>=0?S(e,n,t,r,o):S(e,65535+n+1,t,r,o))}function k(e,n,t,r,o){o||(G(void 0!==n&&null!==n,"missing value"),G("boolean"==typeof r,"missing or invalid endian"),G(void 0!==t&&null!==t,"missing offset"),G(t+3<e.length,"Trying to write beyond buffer length"),Y(n,2147483647,-2147483648));var i=e.length;t>=i||(n>=0?L(e,n,t,r,o):L(e,4294967295+n+1,t,r,o))}function j(e,n,t,r,o){o||(G(void 0!==n&&null!==n,"missing value"),G("boolean"==typeof r,"missing or invalid endian"),G(void 0!==t&&null!==t,"missing offset"),G(t+3<e.length,"Trying to write beyond buffer length"),Z(n,3.4028234663852886e38,-3.4028234663852886e38));var i=e.length;t>=i||Q.write(e,n,t,r,23,4)}function T(e,n,t,r,o){o||(G(void 0!==n&&null!==n,"missing value"),G("boolean"==typeof r,"missing or invalid endian"),G(void 0!==t&&null!==t,"missing offset"),G(t+7<e.length,"Trying to write beyond buffer length"),Z(n,1.7976931348623157e308,-1.7976931348623157e308));var i=e.length;t>=i||Q.write(e,n,t,r,52,8)}function N(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function $(e,n,t){return"number"!=typeof e?t:(e=~~e,e>=n?n:e>=0?e:(e+=n,e>=0?e:0))}function F(e){return e=~~Math.ceil(+e),0>e?0:e}function D(e){return(Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)})(e)}function z(e){return D(e)||o.isBuffer(e)||e&&"object"==typeof e&&"number"==typeof e.length}function P(e){return 16>e?"0"+e.toString(16):e.toString(16)}function q(e){for(var n=[],t=0;t<e.length;t++){var r=e.charCodeAt(t);if(127>=r)n.push(e.charCodeAt(t));else{var o=t;r>=55296&&57343>=r&&t++;for(var i=encodeURIComponent(e.slice(o,t+1)).substr(1).split("%"),s=0;s<i.length;s++)n.push(parseInt(i[s],16))}}return n}function O(e){for(var n=[],t=0;t<e.length;t++)n.push(255&e.charCodeAt(t));return n}function W(e){for(var n,t,r,o=[],i=0;i<e.length;i++)n=e.charCodeAt(i),t=n>>8,r=n%256,o.push(r),o.push(t);return o}function R(e){return K.toByteArray(e)}function J(e,n,t,r){for(var o=0;r>o&&!(o+t>=n.length||o>=e.length);o++)n[o+t]=e[o];return o}function H(e){try{return decodeURIComponent(e)}catch(n){return String.fromCharCode(65533)}}function X(e,n){G("number"==typeof e,"cannot write a non-number as a number"),G(e>=0,"specified a negative value for writing an unsigned value"),G(n>=e,"value is larger than maximum value for type"),G(Math.floor(e)===e,"value has a fractional component")}function Y(e,n,t){G("number"==typeof e,"cannot write a non-number as a number"),G(n>=e,"value larger than maximum allowed value"),G(e>=t,"value smaller than minimum allowed value"),G(Math.floor(e)===e,"value has a fractional component")}function Z(e,n,t){G("number"==typeof e,"cannot write a non-number as a number"),G(n>=e,"value larger than maximum allowed value"),G(e>=t,"value smaller than minimum allowed value")}function G(e,n){if(!e)throw new Error(n||"Failed assertion")}var K=e("base64-js"),Q=e("ieee754");t.Buffer=o,t.SlowBuffer=o,t.INSPECT_MAX_BYTES=50,o.poolSize=8192,o._useTypedArrays=function(){try{var e=new ArrayBuffer(0),n=new Uint8Array(e);return n.foo=function(){return 42},42===n.foo()&&"function"==typeof n.subarray}catch(t){return!1}}(),o.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"raw":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},o.isBuffer=function(e){return!(null===e||void 0===e||!e._isBuffer)},o.byteLength=function(e,n){var t;switch(e+="",n||"utf8"){case"hex":t=e.length/2;break;case"utf8":case"utf-8":t=q(e).length;break;case"ascii":case"binary":case"raw":t=e.length;break;case"base64":t=R(e).length;break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":t=2*e.length;break;default:throw new Error("Unknown encoding")}return t},o.concat=function(e,n){if(G(D(e),"Usage: Buffer.concat(list, [totalLength])\nlist should be an Array."),0===e.length)return new o(0);if(1===e.length)return e[0];var t;if("number"!=typeof n)for(n=0,t=0;t<e.length;t++)n+=e[t].length;var r=new o(n),i=0;for(t=0;t<e.length;t++){var s=e[t];s.copy(r,i),i+=s.length}return r},o.prototype.write=function(e,n,t,r){if(isFinite(n))isFinite(t)||(r=t,t=void 0);else{var o=r;r=n,n=t,t=o}n=Number(n)||0;var i=this.length-n;t?(t=Number(t),t>i&&(t=i)):t=i,r=String(r||"utf8").toLowerCase();var s;switch(r){case"hex":s=c(this,e,n,t);break;case"utf8":case"utf-8":s=d(this,e,n,t);break;case"ascii":s=g(this,e,n,t);break;case"binary":s=h(this,e,n,t);break;case"base64":s=p(this,e,n,t);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":s=m(this,e,n,t);break;default:throw new Error("Unknown encoding")}return s},o.prototype.toString=function(e,n,t){var r=this;if(e=String(e||"utf8").toLowerCase(),n=Number(n)||0,t=void 0!==t?Number(t):t=r.length,t===n)return"";var o;switch(e){case"hex":o=A(r,n,t);break;case"utf8":case"utf-8":o=y(r,n,t);break;case"ascii":o=b(r,n,t);break;case"binary":o=v(r,n,t);break;case"base64":o=w(r,n,t);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":o=E(r,n,t);break;default:throw new Error("Unknown encoding")}return o},o.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},o.prototype.copy=function(e,n,t,r){var i=this;if(t||(t=0),r||0===r||(r=this.length),n||(n=0),r!==t&&0!==e.length&&0!==i.length){G(r>=t,"sourceEnd < sourceStart"),G(n>=0&&n<e.length,"targetStart out of bounds"),G(t>=0&&t<i.length,"sourceStart out of bounds"),G(r>=0&&r<=i.length,"sourceEnd out of bounds"),r>this.length&&(r=this.length),e.length-n<r-t&&(r=e.length-n+t);var s=r-t;if(100>s||!o._useTypedArrays)for(var u=0;s>u;u++)e[u+n]=this[u+t];else e._set(this.subarray(t,t+s),n)}},o.prototype.slice=function(e,n){var t=this.length;if(e=$(e,t,0),n=$(n,t,t),o._useTypedArrays)return o._augment(this.subarray(e,n));for(var r=n-e,i=new o(r,void 0,!0),s=0;r>s;s++)i[s]=this[s+e];return i},o.prototype.get=function(e){return console.log(".get() is deprecated. Access using array indexes instead."),this.readUInt8(e)},o.prototype.set=function(e,n){return console.log(".set() is deprecated. Access using array indexes instead."),this.writeUInt8(e,n)},o.prototype.readUInt8=function(e,n){return n||(G(void 0!==e&&null!==e,"missing offset"),G(e<this.length,"Trying to read beyond buffer length")),e>=this.length?void 0:this[e]},o.prototype.readUInt16LE=function(e,n){return I(this,e,!0,n)},o.prototype.readUInt16BE=function(e,n){return I(this,e,!1,n)},o.prototype.readUInt32LE=function(e,n){return B(this,e,!0,n)},o.prototype.readUInt32BE=function(e,n){return B(this,e,!1,n)},o.prototype.readInt8=function(e,n){if(n||(G(void 0!==e&&null!==e,"missing offset"),G(e<this.length,"Trying to read beyond buffer length")),!(e>=this.length)){var t=128&this[e];return t?-1*(255-this[e]+1):this[e]}},o.prototype.readInt16LE=function(e,n){return U(this,e,!0,n)},o.prototype.readInt16BE=function(e,n){return U(this,e,!1,n)},o.prototype.readInt32LE=function(e,n){return M(this,e,!0,n)},o.prototype.readInt32BE=function(e,n){return M(this,e,!1,n)},o.prototype.readFloatLE=function(e,n){return _(this,e,!0,n)},o.prototype.readFloatBE=function(e,n){return _(this,e,!1,n)},o.prototype.readDoubleLE=function(e,n){return C(this,e,!0,n)},o.prototype.readDoubleBE=function(e,n){return C(this,e,!1,n)},o.prototype.writeUInt8=function(e,n,t){t||(G(void 0!==e&&null!==e,"missing value"),G(void 0!==n&&null!==n,"missing offset"),G(n<this.length,"trying to write beyond buffer length"),X(e,255)),n>=this.length||(this[n]=e)},o.prototype.writeUInt16LE=function(e,n,t){S(this,e,n,!0,t)},o.prototype.writeUInt16BE=function(e,n,t){S(this,e,n,!1,t)},o.prototype.writeUInt32LE=function(e,n,t){L(this,e,n,!0,t)},o.prototype.writeUInt32BE=function(e,n,t){L(this,e,n,!1,t)},o.prototype.writeInt8=function(e,n,t){t||(G(void 0!==e&&null!==e,"missing value"),G(void 0!==n&&null!==n,"missing offset"),G(n<this.length,"Trying to write beyond buffer length"),Y(e,127,-128)),n>=this.length||(e>=0?this.writeUInt8(e,n,t):this.writeUInt8(255+e+1,n,t))},o.prototype.writeInt16LE=function(e,n,t){x(this,e,n,!0,t)},o.prototype.writeInt16BE=function(e,n,t){x(this,e,n,!1,t)},o.prototype.writeInt32LE=function(e,n,t){k(this,e,n,!0,t)},o.prototype.writeInt32BE=function(e,n,t){k(this,e,n,!1,t)},o.prototype.writeFloatLE=function(e,n,t){j(this,e,n,!0,t)},o.prototype.writeFloatBE=function(e,n,t){j(this,e,n,!1,t)},o.prototype.writeDoubleLE=function(e,n,t){T(this,e,n,!0,t)},o.prototype.writeDoubleBE=function(e,n,t){T(this,e,n,!1,t)},o.prototype.fill=function(e,n,t){if(e||(e=0),n||(n=0),t||(t=this.length),"string"==typeof e&&(e=e.charCodeAt(0)),G("number"==typeof e&&!isNaN(e),"value is not a number"),G(t>=n,"end < start"),t!==n&&0!==this.length){G(n>=0&&n<this.length,"start out of bounds"),G(t>=0&&t<=this.length,"end out of bounds");for(var r=n;t>r;r++)this[r]=e}},o.prototype.inspect=function(){for(var e=[],n=this.length,r=0;n>r;r++)if(e[r]=P(this[r]),r===t.INSPECT_MAX_BYTES){e[r+1]="...";break}return"<Buffer "+e.join(" ")+">"},o.prototype.toArrayBuffer=function(){if("undefined"!=typeof Uint8Array){if(o._useTypedArrays)return new o(this).buffer;for(var e=new Uint8Array(this.length),n=0,t=e.length;t>n;n+=1)e[n]=this[n];return e.buffer}throw new Error("Buffer.toArrayBuffer not supported in this browser")};var V=o.prototype;o._augment=function(e){return e._isBuffer=!0,e._get=e.get,e._set=e.set,e.get=V.get,e.set=V.set,e.write=V.write,e.toString=V.toString,e.toLocaleString=V.toString,e.toJSON=V.toJSON,e.copy=V.copy,e.slice=V.slice,e.readUInt8=V.readUInt8,e.readUInt16LE=V.readUInt16LE,e.readUInt16BE=V.readUInt16BE,e.readUInt32LE=V.readUInt32LE,e.readUInt32BE=V.readUInt32BE,e.readInt8=V.readInt8,e.readInt16LE=V.readInt16LE,e.readInt16BE=V.readInt16BE,e.readInt32LE=V.readInt32LE,e.readInt32BE=V.readInt32BE,e.readFloatLE=V.readFloatLE,e.readFloatBE=V.readFloatBE,e.readDoubleLE=V.readDoubleLE,e.readDoubleBE=V.readDoubleBE,e.writeUInt8=V.writeUInt8,e.writeUInt16LE=V.writeUInt16LE,e.writeUInt16BE=V.writeUInt16BE,e.writeUInt32LE=V.writeUInt32LE,e.writeUInt32BE=V.writeUInt32BE,e.writeInt8=V.writeInt8,e.writeInt16LE=V.writeInt16LE,e.writeInt16BE=V.writeInt16BE,e.writeInt32LE=V.writeInt32LE,e.writeInt32BE=V.writeInt32BE,e.writeFloatLE=V.writeFloatLE,e.writeFloatBE=V.writeFloatBE,e.writeDoubleLE=V.writeDoubleLE,e.writeDoubleBE=V.writeDoubleBE,e.fill=V.fill,e.inspect=V.inspect,e.toArrayBuffer=V.toArrayBuffer,e}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/index.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer")},{"base64-js":2,buffer:1,ieee754:3,oMfpAn:4}],2:[function(e,n,t){(function(e,n,r,o,i,s,u,f,a){var l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";!function(e){"use strict";function n(e){var n=e.charCodeAt(0);return n===i||n===c?62:n===s||n===d?63:u>n?-1:u+10>n?n-u+26+26:a+26>n?n-a:f+26>n?n-f+26:void 0}function t(e){function t(e){a[c++]=e}var r,i,s,u,f,a;if(e.length%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var l=e.length;f="="===e.charAt(l-2)?2:"="===e.charAt(l-1)?1:0,a=new o(3*e.length/4-f),s=f>0?e.length-4:e.length;var c=0;for(r=0,i=0;s>r;r+=4,i+=3)u=n(e.charAt(r))<<18|n(e.charAt(r+1))<<12|n(e.charAt(r+2))<<6|n(e.charAt(r+3)),t((16711680&u)>>16),t((65280&u)>>8),t(255&u);return 2===f?(u=n(e.charAt(r))<<2|n(e.charAt(r+1))>>4,t(255&u)):1===f&&(u=n(e.charAt(r))<<10|n(e.charAt(r+1))<<4|n(e.charAt(r+2))>>2,t(u>>8&255),t(255&u)),a}function r(e){function n(e){return l.charAt(e)}function t(e){return n(e>>18&63)+n(e>>12&63)+n(e>>6&63)+n(63&e)}var r,o,i,s=e.length%3,u="";for(r=0,i=e.length-s;i>r;r+=3)o=(e[r]<<16)+(e[r+1]<<8)+e[r+2],u+=t(o);switch(s){case 1:o=e[e.length-1],u+=n(o>>2),u+=n(o<<4&63),u+="==";break;case 2:o=(e[e.length-2]<<8)+e[e.length-1],u+=n(o>>10),u+=n(o>>4&63),u+=n(o<<2&63),u+="="}return u}var o="undefined"!=typeof Uint8Array?Uint8Array:Array,i="+".charCodeAt(0),s="/".charCodeAt(0),u="0".charCodeAt(0),f="a".charCodeAt(0),a="A".charCodeAt(0),c="-".charCodeAt(0),d="_".charCodeAt(0);e.toByteArray=t,e.fromByteArray=r}("undefined"==typeof t?this.base64js={}:t)}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib/b64.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib")},{buffer:1,oMfpAn:4}],3:[function(e,n,t){(function(e,n,r,o,i,s,u,f,a){t.read=function(e,n,t,r,o){var i,s,u=8*o-r-1,f=(1<<u)-1,a=f>>1,l=-7,c=t?o-1:0,d=t?-1:1,g=e[n+c];for(c+=d,i=g&(1<<-l)-1,g>>=-l,l+=u;l>0;i=256*i+e[n+c],c+=d,l-=8);for(s=i&(1<<-l)-1,i>>=-l,l+=r;l>0;s=256*s+e[n+c],c+=d,l-=8);if(0===i)i=1-a;else{if(i===f)return s?NaN:(g?-1:1)*(1/0);s+=Math.pow(2,r),i-=a}return(g?-1:1)*s*Math.pow(2,i-r)},t.write=function(e,n,t,r,o,i){var s,u,f,a=8*i-o-1,l=(1<<a)-1,c=l>>1,d=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,g=r?0:i-1,h=r?1:-1,p=0>n||0===n&&0>1/n?1:0;for(n=Math.abs(n),isNaN(n)||n===1/0?(u=isNaN(n)?1:0,s=l):(s=Math.floor(Math.log(n)/Math.LN2),n*(f=Math.pow(2,-s))<1&&(s--,f*=2),n+=s+c>=1?d/f:d*Math.pow(2,1-c),n*f>=2&&(s++,f/=2),s+c>=l?(u=0,s=l):s+c>=1?(u=(n*f-1)*Math.pow(2,o),s+=c):(u=n*Math.pow(2,c-1)*Math.pow(2,o),s=0));o>=8;e[t+g]=255&u,g+=h,u/=256,o-=8);for(s=s<<o|u,a+=o;a>0;e[t+g]=255&s,g+=h,s/=256,a-=8);e[t+g-h]|=128*p}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/ieee754/index.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/ieee754")},{buffer:1,oMfpAn:4}],4:[function(e,n,t){(function(e,t,r,o,i,s,u,f,a){function l(){}var e=n.exports={};e.nextTick=function(){var e="undefined"!=typeof window&&window.setImmediate,n="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(e)return function(e){return window.setImmediate(e)};if(n){var t=[];return window.addEventListener("message",function(e){var n=e.source;if((n===window||null===n)&&"process-tick"===e.data&&(e.stopPropagation(),t.length>0)){var r=t.shift();r()}},!0),function(e){t.push(e),window.postMessage("process-tick","*")}}return function(e){setTimeout(e,0)}}(),e.title="browser",e.browser=!0,e.env={},e.argv=[],e.on=l,e.addListener=l,e.once=l,e.off=l,e.removeListener=l,e.removeAllListeners=l,e.emit=l,e.binding=function(e){throw new Error("process.binding is not supported")},e.cwd=function(){return"/"},e.chdir=function(e){throw new Error("process.chdir is not supported")}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/process/browser.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/process")},{buffer:1,oMfpAn:4}],5:[function(e,n,t){(function(e,t,r,o,i,s,u,f,a){n.exports=function(e){e.config(["snapRemoteProvider",function(e){e.globalOptions={disable:"right",tapToClose:!0}}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/config/index.js","/config")},{buffer:1,oMfpAn:4}],6:[function(e,n,t){(function(e,t,r,o,i,s,u,f,a){n.exports=function(e){e.constant("commonConstants",{local:"http://192.168.0.120:8011/",production:"http://idemind-api.herokuapp.com/",token:"ae33d6face3d0a8882059e2583725b786c2c4fb96e7c5805b4cdb0590292edfc"})}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/constants/commonConstants.js","/constants")},{buffer:1,oMfpAn:4}],7:[function(e,n,t){(function(t,r,o,i,s,u,f,a,l){var c=angular.module("zsConstants",[]);e("./commonConstants")(c),n.exports=c}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/constants/index.js","/constants")},{"./commonConstants":6,buffer:1,oMfpAn:4}],8:[function(e,n,t){(function(n,t,r,o,i,s,u,f,a){"use strict";e("./constants"),e("./session"),e("./home");var l=angular.module("ngZeroStateMobileApp",["ui.router","snap","zsSession","zsHome"]);e("./routes")(l),e("./config")(l)}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_2d1d2633.js","/")},{"./config":5,"./constants":7,"./home":10,"./routes":11,"./session":12,buffer:1,oMfpAn:4}],9:[function(e,n,t){(function(e,t,r,o,i,s,u,f,a){n.exports=function(e){e.controller("homeController",["$scope","$rootScope","sessionService","localStorageService",function(e,n,t,r){t.authorize(),n.signout=function(){t.removeCurrentUser()},e.test=function(){t.test()}}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/home/homeController.js","/home")},{buffer:1,oMfpAn:4}],10:[function(e,n,t){(function(t,r,o,i,s,u,f,a,l){var c=angular.module("zsHome",[]);e("./homeController")(c),n.exports=c}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/home/index.js","/home")},{"./homeController":9,buffer:1,oMfpAn:4}],11:[function(e,n,t){(function(e,t,r,o,i,s,u,f,a){n.exports=function(e){e.config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,n,t){n.otherwise("/platforms/ios/www/index.html"),e.state("home",{url:"/platforms/ios/www/index.html",templateUrl:"templates/home.html",controller:"homeController"}).state("signin",{templateUrl:"templates/signin.html",controller:"signinController"}).state("signup",{templateUrl:"templates/signup.html",controller:"signupController"})}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/routes/index.js","/routes")},{buffer:1,oMfpAn:4}],12:[function(e,n,t){(function(t,r,o,i,s,u,f,a,l){var c=angular.module("zsSession",["zsConstants","LocalStorageModule"]);e("./sessionService")(c),e("./signinService")(c),e("./signinController")(c),e("./signupService")(c),e("./signupController")(c),n.exports=c}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/session/index.js","/session")},{"./sessionService":13,"./signinController":14,"./signinService":15,"./signupController":16,"./signupService":17,buffer:1,oMfpAn:4}],13:[function(e,n,t){(function(e,t,r,o,i,s,u,f,a){"use strict";n.exports=function(e){e.service("sessionService",["$http","$rootScope","commonConstants","localStorageService",function(e,n,t,r){var o=this;o.authorize=function(){_.isNull(r.get("sessionId"))||e.get(t.production+"auth?sessionId="+o.sessionUser()+"&token="+t.token).then(function(e){o.saveUser(e.data),n.user=o.getCurrentUser(),console.log(n.user)})},o.saveUser=function(e){r.set("email",e.email),r.set("status",!_.isUndefined(e.confirmedEmail)),r.set("sessionId",e.sessionId)},o.getCurrentUser=function(){return{email:r.get("email"),status:r.get("status"),session:r.get("sessionId")}},o.removeCurrentUser=function(){e["delete"](t.production+"auth?sessionId="+o.sessionUser()+"&token="+t.token).then(function(){r.remove("email"),r.remove("status"),r.remove("sessionId"),n.user=null})},o.sessionUser=function(){var e=r.get("sessionId");return _.isNull(e)?"":e}}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/session/sessionService.js","/session")},{buffer:1,oMfpAn:4}],14:[function(e,n,t){(function(e,t,r,o,i,s,u,f,a){"use strict";n.exports=function(e){e.controller("signinController",["$scope","$state","signinService",function(e,n,t){e.submitted=!1,e.submit=function(r,o){return o.$invalid?void(e.submitted=!0):void t.signin(r).then(function(){n.go("home")})["catch"](function(e){})}}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/session/signinController.js","/session")},{buffer:1,oMfpAn:4}],15:[function(e,n,t){(function(e,t,r,o,i,s,u,f,a){"use strict";n.exports=function(e){e.service("signinService",["$http","$q","commonConstants","sessionService",function(e,n,t,r){var o=this;o.signin=function(o){var i=n.defer();return e.get(t.production+"auth?session="+r.sessionUser()+"&token="+t.token+"&email="+o.email+"&password="+o.password).then(function(e){r.saveUser(e.data),i.resolve(o)})["catch"](function(e){i.reject(e)}),i.promise}}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/session/signinService.js","/session")},{buffer:1,oMfpAn:4}],16:[function(e,n,t){(function(e,t,r,o,i,s,u,f,a){n.exports=function(e){e.controller("signupController",["$scope","$state","signupService",function(e,n,t){e.submitted=!1,e.submit=function(r,o){return o.$invalid?void(e.submitted=!0):void t.signup(r).then(function(e){n.go("home")})["catch"](function(){console.log("Something went wrong!")})}}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/session/signupController.js","/session")},{buffer:1,oMfpAn:4}],17:[function(e,n,t){(function(e,t,r,o,i,s,u,f,a){"use strict";n.exports=function(e){e.service("signupService",["$http","$q","commonConstants","sessionService",function(e,n,t,r){var o=this;o.signup=function(o){var i=n.defer();return e.post(t.production+"auth?token="+t.token,o).then(function(e){i.resolve(e),r.saveUser(e.data)})["catch"](function(e){i.reject(e)}),i.promise}}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/session/signupService.js","/session")},{buffer:1,oMfpAn:4}]},{},[8]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJlIiwidCIsIm4iLCJyIiwicyIsIm8iLCJ1IiwiYSIsInJlcXVpcmUiLCJpIiwiRXJyb3IiLCJmIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLDEsIm1vZHVsZSIsInByb2Nlc3MiLCJnbG9iYWwiLCJCdWZmZXIiLCJfX2FyZ3VtZW50MCIsIl9fYXJndW1lbnQxIiwiX19hcmd1bWVudDIiLCJfX2FyZ3VtZW50MyIsIl9fZmlsZW5hbWUiLCJfX2Rpcm5hbWUiLCJzdWJqZWN0IiwiZW5jb2RpbmciLCJub1plcm8iLCJ0aGlzIiwidHlwZSIsInN0cmluZ3RyaW0iLCJjb2VyY2UiLCJieXRlTGVuZ3RoIiwiYnVmIiwiX3VzZVR5cGVkQXJyYXlzIiwiX2F1Z21lbnQiLCJVaW50OEFycmF5IiwiX2lzQnVmZmVyIiwiX3NldCIsImlzQXJyYXlpc2giLCJpc0J1ZmZlciIsInJlYWRVSW50OCIsIndyaXRlIiwiX2hleFdyaXRlIiwic3RyaW5nIiwib2Zmc2V0IiwiTnVtYmVyIiwicmVtYWluaW5nIiwic3RyTGVuIiwiYXNzZXJ0IiwiYnl0ZSIsInBhcnNlSW50Iiwic3Vic3RyIiwiaXNOYU4iLCJfY2hhcnNXcml0dGVuIiwiX3V0ZjhXcml0ZSIsImNoYXJzV3JpdHRlbiIsImJsaXRCdWZmZXIiLCJ1dGY4VG9CeXRlcyIsIl9hc2NpaVdyaXRlIiwiYXNjaWlUb0J5dGVzIiwiX2JpbmFyeVdyaXRlIiwiX2Jhc2U2NFdyaXRlIiwiYmFzZTY0VG9CeXRlcyIsIl91dGYxNmxlV3JpdGUiLCJ1dGYxNmxlVG9CeXRlcyIsIl9iYXNlNjRTbGljZSIsInN0YXJ0IiwiZW5kIiwiYmFzZTY0IiwiZnJvbUJ5dGVBcnJheSIsInNsaWNlIiwiX3V0ZjhTbGljZSIsInJlcyIsInRtcCIsIk1hdGgiLCJtaW4iLCJkZWNvZGVVdGY4Q2hhciIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInRvU3RyaW5nIiwiX2FzY2lpU2xpY2UiLCJyZXQiLCJfYmluYXJ5U2xpY2UiLCJfaGV4U2xpY2UiLCJsZW4iLCJvdXQiLCJ0b0hleCIsIl91dGYxNmxlU2xpY2UiLCJieXRlcyIsIl9yZWFkVUludDE2IiwibGl0dGxlRW5kaWFuIiwibm9Bc3NlcnQiLCJ1bmRlZmluZWQiLCJ2YWwiLCJfcmVhZFVJbnQzMiIsIl9yZWFkSW50MTYiLCJuZWciLCJfcmVhZEludDMyIiwiX3JlYWRGbG9hdCIsImllZWU3NTQiLCJyZWFkIiwiX3JlYWREb3VibGUiLCJfd3JpdGVVSW50MTYiLCJ2YWx1ZSIsInZlcmlmdWludCIsImoiLCJfd3JpdGVVSW50MzIiLCJfd3JpdGVJbnQxNiIsInZlcmlmc2ludCIsIl93cml0ZUludDMyIiwiX3dyaXRlRmxvYXQiLCJ2ZXJpZklFRUU3NTQiLCJfd3JpdGVEb3VibGUiLCJzdHIiLCJ0cmltIiwicmVwbGFjZSIsImNsYW1wIiwiaW5kZXgiLCJkZWZhdWx0VmFsdWUiLCJjZWlsIiwiaXNBcnJheSIsIkFycmF5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwiYnl0ZUFycmF5IiwiYiIsImNoYXJDb2RlQXQiLCJwdXNoIiwiaCIsImVuY29kZVVSSUNvbXBvbmVudCIsInNwbGl0IiwiYyIsImhpIiwibG8iLCJ0b0J5dGVBcnJheSIsInNyYyIsImRzdCIsImRlY29kZVVSSUNvbXBvbmVudCIsImVyciIsIm1heCIsImZsb29yIiwidGVzdCIsIm1lc3NhZ2UiLCJTbG93QnVmZmVyIiwiSU5TUEVDVF9NQVhfQllURVMiLCJwb29sU2l6ZSIsIkFycmF5QnVmZmVyIiwiYXJyIiwiZm9vIiwic3ViYXJyYXkiLCJpc0VuY29kaW5nIiwidG9Mb3dlckNhc2UiLCJjb25jYXQiLCJsaXN0IiwidG90YWxMZW5ndGgiLCJwb3MiLCJpdGVtIiwiY29weSIsImlzRmluaXRlIiwic3dhcCIsInNlbGYiLCJ0b0pTT04iLCJkYXRhIiwiX2FyciIsInRhcmdldCIsInRhcmdldF9zdGFydCIsInNvdXJjZSIsInNsaWNlTGVuIiwibmV3QnVmIiwiZ2V0IiwiY29uc29sZSIsImxvZyIsInNldCIsInYiLCJ3cml0ZVVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQxNkJFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJmaWxsIiwiaW5zcGVjdCIsImpvaW4iLCJ0b0FycmF5QnVmZmVyIiwiYnVmZmVyIiwiQlAiLCJfZ2V0IiwidG9Mb2NhbGVTdHJpbmciLCJ3aW5kb3ciLCJhcmd1bWVudHMiLCJiYXNlNjQtanMiLCJvTWZwQW4iLDIsImxvb2t1cCIsImRlY29kZSIsImVsdCIsImNvZGUiLCJQTFVTIiwiUExVU19VUkxfU0FGRSIsIlNMQVNIIiwiU0xBU0hfVVJMX1NBRkUiLCJOVU1CRVIiLCJVUFBFUiIsIkxPV0VSIiwiYjY0VG9CeXRlQXJyYXkiLCJiNjQiLCJMIiwibCIsInBsYWNlSG9sZGVycyIsImNoYXJBdCIsIkFyciIsInVpbnQ4VG9CYXNlNjQiLCJ1aW50OCIsImVuY29kZSIsIm51bSIsInRyaXBsZXRUb0Jhc2U2NCIsInRlbXAiLCJleHRyYUJ5dGVzIiwib3V0cHV0IiwiYmFzZTY0anMiLDMsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwibSIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsImQiLCJOYU4iLCJJbmZpbml0eSIsInBvdyIsInJ0IiwiYWJzIiwiTE4yIiw0LCJub29wIiwibmV4dFRpY2siLCJjYW5TZXRJbW1lZGlhdGUiLCJzZXRJbW1lZGlhdGUiLCJjYW5Qb3N0IiwicG9zdE1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwicXVldWUiLCJldiIsInN0b3BQcm9wYWdhdGlvbiIsImZuIiwic2hpZnQiLCJzZXRUaW1lb3V0IiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwiYmluZGluZyIsIm5hbWUiLCJjd2QiLCJjaGRpciIsImRpciIsNSwiYXBwIiwiY29uZmlnIiwic25hcFJlbW90ZVByb3ZpZGVyIiwiZ2xvYmFsT3B0aW9ucyIsImRpc2FibGUiLCJ0YXBUb0Nsb3NlIiw2LCJjb25zdGFudCIsImxvY2FsIiwicHJvZHVjdGlvbiIsInRva2VuIiw3LCJjb25zdGFudHMiLCJhbmd1bGFyIiwiLi9jb21tb25Db25zdGFudHMiLDgsIi4vY29uZmlnIiwiLi9jb25zdGFudHMiLCIuL2hvbWUiLCIuL3JvdXRlcyIsIi4vc2Vzc2lvbiIsOSwiaG9tZSIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCIkcm9vdFNjb3BlIiwic2Vzc2lvblNlcnZpY2UiLCJsb2NhbFN0b3JhZ2VTZXJ2aWNlIiwiYXV0aG9yaXplIiwic2lnbm91dCIsInJlbW92ZUN1cnJlbnRVc2VyIiwxMCwiLi9ob21lQ29udHJvbGxlciIsMTEsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCJvdGhlcndpc2UiLCJzdGF0ZSIsInVybCIsInRlbXBsYXRlVXJsIiwxMiwic2Vzc2lvbiIsIi4vc2Vzc2lvblNlcnZpY2UiLCIuL3NpZ25pbkNvbnRyb2xsZXIiLCIuL3NpZ25pblNlcnZpY2UiLCIuL3NpZ251cENvbnRyb2xsZXIiLCIuL3NpZ251cFNlcnZpY2UiLDEzLCJzZXJ2aWNlIiwiJGh0dHAiLCJjb21tb25Db25zdGFudHMiLCJfIiwiaXNOdWxsIiwic2Vzc2lvblVzZXIiLCJ0aGVuIiwic2F2ZVVzZXIiLCJ1c2VyIiwiZ2V0Q3VycmVudFVzZXIiLCJlbWFpbCIsImlzVW5kZWZpbmVkIiwiY29uZmlybWVkRW1haWwiLCJzZXNzaW9uSWQiLCJzdGF0dXMiLCJyZW1vdmUiLCJpZCIsMTQsIiRzdGF0ZSIsInNpZ25pblNlcnZpY2UiLCJzdWJtaXR0ZWQiLCJzdWJtaXQiLCJmb3JtIiwiJGludmFsaWQiLCJzaWduaW4iLCJnbyIsMTUsIiRxIiwiZGVmZXIiLCJwYXNzd29yZCIsInJlc29sdmUiLCJyZWplY3QiLCJwcm9taXNlIiwxNiwic2lnbnVwU2VydmljZSIsInNpZ251cCIsMTcsInBvc3QiXSwibWFwcGluZ3MiOiJDQUFBLFFBQVVBLEdBQUVDLEVBQUVDLEVBQUVDLEdBQUcsUUFBU0MsR0FBRUMsRUFBRUMsR0FBRyxJQUFJSixFQUFFRyxHQUFHLENBQUMsSUFBSUosRUFBRUksR0FBRyxDQUFDLEdBQUlFLEdBQWtCLGtCQUFUQyxVQUFxQkEsT0FBUSxLQUFJRixHQUFHQyxFQUFFLE1BQU9BLEdBQUVGLEdBQUUsRUFBSSxJQUFHSSxFQUFFLE1BQU9BLEdBQUVKLEdBQUUsRUFBSSxNQUFNLElBQUlLLE9BQU0sdUJBQXVCTCxFQUFFLEtBQUssR0FBSU0sR0FBRVQsRUFBRUcsSUFBSU8sV0FBWVgsR0FBRUksR0FBRyxHQUFHUSxLQUFLRixFQUFFQyxRQUFRLFNBQVNaLEdBQUcsR0FBSUUsR0FBRUQsRUFBRUksR0FBRyxHQUFHTCxFQUFHLE9BQU9JLEdBQUVGLEVBQUVBLEVBQUVGLElBQUlXLEVBQUVBLEVBQUVDLFFBQVFaLEVBQUVDLEVBQUVDLEVBQUVDLEdBQUcsTUFBT0QsR0FBRUcsR0FBR08sUUFBa0QsSUFBSSxHQUExQ0gsR0FBa0Isa0JBQVRELFVBQXFCQSxRQUFnQkgsRUFBRSxFQUFFQSxFQUFFRixFQUFFVyxPQUFPVCxJQUFJRCxFQUFFRCxFQUFFRSxHQUFJLE9BQU9ELEtBQUtXLEdBQUcsU0FBU1AsRUFBUVEs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QVVDLEVBQU8wQixFQUFJekIsRUFBaUJ6QixHQUNwQyxHQUFJMUosR0FBT3JJLElBQ1hxSSxHQUFLb04sT0FBUyxTQUFVM0IsR0FDdEIsR0FBSW9CLEdBQVFELEVBQUdDLE9BU2YsT0FQQTNCLEdBQU1vQyxLQUFLbkMsRUFBZ0IxQyxXQUFhLGNBQWdCMEMsRUFBZ0J6QyxNQUFPK0MsR0FBTUYsS0FBSyxTQUFVL1EsR0FDbEdxUyxFQUFNRSxRQUFRdlMsR0FDZGtQLEVBQWU4QixTQUFTaFIsRUFBSTBGLFFBRjlCZ0wsU0FHUyxTQUFVeE0sR0FDakJtTyxFQUFNRyxPQUFPdE8sS0FHUm1PLEVBQU1JLGVBS2xCdFcsS0FBS2dCLEtBQUtyQixFQUFRLFVBQTBCLG1CQUFUMEosTUFBdUJBLEtBQXlCLG1CQUFYaUQsUUFBeUJBLFVBQVkzTSxFQUFRLFVBQVVXLE9BQU9pTSxVQUFVLEdBQUdBLFVBQVUsR0FBR0EsVUFBVSxHQUFHQSxVQUFVLEdBQUcsNEJBQTRCLGNBQ3ROTCxPQUFTLEVBQUVPLE9BQVMsU0FBUyIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpfXZhciBmPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChmLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGYsZi5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuQnVmZmVyLnBvb2xTaXplID0gODE5MlxuXG4vKipcbiAqIElmIGBCdWZmZXIuX3VzZVR5cGVkQXJyYXlzYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKGNvbXBhdGlibGUgZG93biB0byBJRTYpXG4gKi9cbkJ1ZmZlci5fdXNlVHlwZWRBcnJheXMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBEZXRlY3QgaWYgYnJvd3NlciBzdXBwb3J0cyBUeXBlZCBBcnJheXMuIFN1cHBvcnRlZCBicm93c2VycyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLFxuICAvLyBDaHJvbWUgNyssIFNhZmFyaSA1LjErLCBPcGVyYSAxMS42KywgaU9TIDQuMisuIElmIHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgYWRkaW5nXG4gIC8vIHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcywgdGhlbiB0aGF0J3MgdGhlIHNhbWUgYXMgbm8gYFVpbnQ4QXJyYXlgIHN1cHBvcnRcbiAgLy8gYmVjYXVzZSB3ZSBuZWVkIHRvIGJlIGFibGUgdG8gYWRkIGFsbCB0aGUgbm9kZSBCdWZmZXIgQVBJIG1ldGhvZHMuIFRoaXMgaXMgYW4gaXNzdWVcbiAgLy8gaW4gRmlyZWZveCA0LTI5LiBOb3cgZml4ZWQ6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOFxuICB0cnkge1xuICAgIHZhciBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMClcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoYnVmKVxuICAgIGFyci5mb28gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9XG4gICAgcmV0dXJuIDQyID09PSBhcnIuZm9vKCkgJiZcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAvLyBDaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59KSgpXG5cbi8qKlxuICogQ2xhc3M6IEJ1ZmZlclxuICogPT09PT09PT09PT09PVxuICpcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgYXJlIGF1Z21lbnRlZFxuICogd2l0aCBmdW5jdGlvbiBwcm9wZXJ0aWVzIGZvciBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgQVBJIGZ1bmN0aW9ucy4gV2UgdXNlXG4gKiBgVWludDhBcnJheWAgc28gdGhhdCBzcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdCByZXR1cm5zXG4gKiBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBCeSBhdWdtZW50aW5nIHRoZSBpbnN0YW5jZXMsIHdlIGNhbiBhdm9pZCBtb2RpZnlpbmcgdGhlIGBVaW50OEFycmF5YFxuICogcHJvdG90eXBlLlxuICovXG5mdW5jdGlvbiBCdWZmZXIgKHN1YmplY3QsIGVuY29kaW5nLCBub1plcm8pIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpXG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoc3ViamVjdCwgZW5jb2RpbmcsIG5vWmVybylcblxuICB2YXIgdHlwZSA9IHR5cGVvZiBzdWJqZWN0XG5cbiAgLy8gV29ya2Fyb3VuZDogbm9kZSdzIGJhc2U2NCBpbXBsZW1lbnRhdGlvbiBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgc3RyaW5nc1xuICAvLyB3aGlsZSBiYXNlNjQtanMgZG9lcyBub3QuXG4gIGlmIChlbmNvZGluZyA9PT0gJ2Jhc2U2NCcgJiYgdHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICBzdWJqZWN0ID0gc3RyaW5ndHJpbShzdWJqZWN0KVxuICAgIHdoaWxlIChzdWJqZWN0Lmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICAgIHN1YmplY3QgPSBzdWJqZWN0ICsgJz0nXG4gICAgfVxuICB9XG5cbiAgLy8gRmluZCB0aGUgbGVuZ3RoXG4gIHZhciBsZW5ndGhcbiAgaWYgKHR5cGUgPT09ICdudW1iZXInKVxuICAgIGxlbmd0aCA9IGNvZXJjZShzdWJqZWN0KVxuICBlbHNlIGlmICh0eXBlID09PSAnc3RyaW5nJylcbiAgICBsZW5ndGggPSBCdWZmZXIuYnl0ZUxlbmd0aChzdWJqZWN0LCBlbmNvZGluZylcbiAgZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpXG4gICAgbGVuZ3RoID0gY29lcmNlKHN1YmplY3QubGVuZ3RoKSAvLyBhc3N1bWUgdGhhdCBvYmplY3QgaXMgYXJyYXktbGlrZVxuICBlbHNlXG4gICAgdGhyb3cgbmV3IEVycm9yKCdGaXJzdCBhcmd1bWVudCBuZWVkcyB0byBiZSBhIG51bWJlciwgYXJyYXkgb3Igc3RyaW5nLicpXG5cbiAgdmFyIGJ1ZlxuICBpZiAoQnVmZmVyLl91c2VUeXBlZEFycmF5cykge1xuICAgIC8vIFByZWZlcnJlZDogUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICBidWYgPSBCdWZmZXIuX2F1Z21lbnQobmV3IFVpbnQ4QXJyYXkobGVuZ3RoKSlcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIFRISVMgaW5zdGFuY2Ugb2YgQnVmZmVyIChjcmVhdGVkIGJ5IGBuZXdgKVxuICAgIGJ1ZiA9IHRoaXNcbiAgICBidWYubGVuZ3RoID0gbGVuZ3RoXG4gICAgYnVmLl9pc0J1ZmZlciA9IHRydWVcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChCdWZmZXIuX3VzZVR5cGVkQXJyYXlzICYmIHR5cGVvZiBzdWJqZWN0LmJ5dGVMZW5ndGggPT09ICdudW1iZXInKSB7XG4gICAgLy8gU3BlZWQgb3B0aW1pemF0aW9uIC0tIHVzZSBzZXQgaWYgd2UncmUgY29weWluZyBmcm9tIGEgdHlwZWQgYXJyYXlcbiAgICBidWYuX3NldChzdWJqZWN0KVxuICB9IGVsc2UgaWYgKGlzQXJyYXlpc2goc3ViamVjdCkpIHtcbiAgICAvLyBUcmVhdCBhcnJheS1pc2ggb2JqZWN0cyBhcyBhIGJ5dGUgYXJyYXlcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoc3ViamVjdCkpXG4gICAgICAgIGJ1ZltpXSA9IHN1YmplY3QucmVhZFVJbnQ4KGkpXG4gICAgICBlbHNlXG4gICAgICAgIGJ1ZltpXSA9IHN1YmplY3RbaV1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICBidWYud3JpdGUoc3ViamVjdCwgMCwgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgIUJ1ZmZlci5fdXNlVHlwZWRBcnJheXMgJiYgIW5vWmVybykge1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgYnVmW2ldID0gMFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBidWZcbn1cblxuLy8gU1RBVElDIE1FVEhPRFNcbi8vID09PT09PT09PT09PT09XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICdyYXcnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiAoYikge1xuICByZXR1cm4gISEoYiAhPT0gbnVsbCAmJiBiICE9PSB1bmRlZmluZWQgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gZnVuY3Rpb24gKHN0ciwgZW5jb2RpbmcpIHtcbiAgdmFyIHJldFxuICBzdHIgPSBzdHIgKyAnJ1xuICBzd2l0Y2ggKGVuY29kaW5nIHx8ICd1dGY4Jykge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgICByZXQgPSBzdHIubGVuZ3RoIC8gMlxuICAgICAgYnJlYWtcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgICByZXQgPSB1dGY4VG9CeXRlcyhzdHIpLmxlbmd0aFxuICAgICAgYnJlYWtcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdyYXcnOlxuICAgICAgcmV0ID0gc3RyLmxlbmd0aFxuICAgICAgYnJlYWtcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgcmV0ID0gYmFzZTY0VG9CeXRlcyhzdHIpLmxlbmd0aFxuICAgICAgYnJlYWtcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0ID0gc3RyLmxlbmd0aCAqIDJcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZycpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gKGxpc3QsIHRvdGFsTGVuZ3RoKSB7XG4gIGFzc2VydChpc0FycmF5KGxpc3QpLCAnVXNhZ2U6IEJ1ZmZlci5jb25jYXQobGlzdCwgW3RvdGFsTGVuZ3RoXSlcXG4nICtcbiAgICAgICdsaXN0IHNob3VsZCBiZSBhbiBBcnJheS4nKVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKDApXG4gIH0gZWxzZSBpZiAobGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gbGlzdFswXVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB0b3RhbExlbmd0aCAhPT0gJ251bWJlcicpIHtcbiAgICB0b3RhbExlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgdG90YWxMZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcih0b3RhbExlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV1cbiAgICBpdGVtLmNvcHkoYnVmLCBwb3MpXG4gICAgcG9zICs9IGl0ZW0ubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG4vLyBCVUZGRVIgSU5TVEFOQ0UgTUVUSE9EU1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gX2hleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgYXNzZXJ0KHN0ckxlbiAlIDIgPT09IDAsICdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYnl0ZSA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBhc3NlcnQoIWlzTmFOKGJ5dGUpLCAnSW52YWxpZCBoZXggc3RyaW5nJylcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBieXRlXG4gIH1cbiAgQnVmZmVyLl9jaGFyc1dyaXR0ZW4gPSBpICogMlxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBfdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IEJ1ZmZlci5fY2hhcnNXcml0dGVuID1cbiAgICBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG4gIHJldHVybiBjaGFyc1dyaXR0ZW5cbn1cblxuZnVuY3Rpb24gX2FzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICB2YXIgY2hhcnNXcml0dGVuID0gQnVmZmVyLl9jaGFyc1dyaXR0ZW4gPVxuICAgIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG4gIHJldHVybiBjaGFyc1dyaXR0ZW5cbn1cblxuZnVuY3Rpb24gX2JpbmFyeVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIF9hc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gX2Jhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IEJ1ZmZlci5fY2hhcnNXcml0dGVuID1cbiAgICBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbiAgcmV0dXJuIGNoYXJzV3JpdHRlblxufVxuXG5mdW5jdGlvbiBfdXRmMTZsZVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IEJ1ZmZlci5fY2hhcnNXcml0dGVuID1cbiAgICBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG4gIHJldHVybiBjaGFyc1dyaXR0ZW5cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBTdXBwb3J0IGJvdGggKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKVxuICAvLyBhbmQgdGhlIGxlZ2FjeSAoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpXG4gIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgaWYgKCFpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICB9IGVsc2UgeyAgLy8gbGVnYWN5XG4gICAgdmFyIHN3YXAgPSBlbmNvZGluZ1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgb2Zmc2V0ID0gbGVuZ3RoXG4gICAgbGVuZ3RoID0gc3dhcFxuICB9XG5cbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZyB8fCAndXRmOCcpLnRvTG93ZXJDYXNlKClcblxuICB2YXIgcmV0XG4gIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgICAgcmV0ID0gX2hleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIHJldCA9IF91dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYXNjaWknOlxuICAgICAgcmV0ID0gX2FzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgIHJldCA9IF9iaW5hcnlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgcmV0ID0gX2Jhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXQgPSBfdXRmMTZsZVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2RpbmcnKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZyB8fCAndXRmOCcpLnRvTG93ZXJDYXNlKClcbiAgc3RhcnQgPSBOdW1iZXIoc3RhcnQpIHx8IDBcbiAgZW5kID0gKGVuZCAhPT0gdW5kZWZpbmVkKVxuICAgID8gTnVtYmVyKGVuZClcbiAgICA6IGVuZCA9IHNlbGYubGVuZ3RoXG5cbiAgLy8gRmFzdHBhdGggZW1wdHkgc3RyaW5nc1xuICBpZiAoZW5kID09PSBzdGFydClcbiAgICByZXR1cm4gJydcblxuICB2YXIgcmV0XG4gIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgICAgcmV0ID0gX2hleFNsaWNlKHNlbGYsIHN0YXJ0LCBlbmQpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIHJldCA9IF91dGY4U2xpY2Uoc2VsZiwgc3RhcnQsIGVuZClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYXNjaWknOlxuICAgICAgcmV0ID0gX2FzY2lpU2xpY2Uoc2VsZiwgc3RhcnQsIGVuZClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgIHJldCA9IF9iaW5hcnlTbGljZShzZWxmLCBzdGFydCwgZW5kKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgcmV0ID0gX2Jhc2U2NFNsaWNlKHNlbGYsIHN0YXJ0LCBlbmQpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXQgPSBfdXRmMTZsZVNsaWNlKHNlbGYsIHN0YXJ0LCBlbmQpXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2RpbmcnKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKHRhcmdldCwgdGFyZ2V0X3N0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIHZhciBzb3VyY2UgPSB0aGlzXG5cbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKCF0YXJnZXRfc3RhcnQpIHRhcmdldF9zdGFydCA9IDBcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVyblxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCBzb3VyY2UubGVuZ3RoID09PSAwKSByZXR1cm5cblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGFzc2VydChlbmQgPj0gc3RhcnQsICdzb3VyY2VFbmQgPCBzb3VyY2VTdGFydCcpXG4gIGFzc2VydCh0YXJnZXRfc3RhcnQgPj0gMCAmJiB0YXJnZXRfc3RhcnQgPCB0YXJnZXQubGVuZ3RoLFxuICAgICAgJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBhc3NlcnQoc3RhcnQgPj0gMCAmJiBzdGFydCA8IHNvdXJjZS5sZW5ndGgsICdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgYXNzZXJ0KGVuZCA+PSAwICYmIGVuZCA8PSBzb3VyY2UubGVuZ3RoLCAnc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aClcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldF9zdGFydCA8IGVuZCAtIHN0YXJ0KVxuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRfc3RhcnQgKyBzdGFydFxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuXG4gIGlmIChsZW4gPCAxMDAgfHwgIUJ1ZmZlci5fdXNlVHlwZWRBcnJheXMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRfc3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0Ll9zZXQodGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLCB0YXJnZXRfc3RhcnQpXG4gIH1cbn1cblxuZnVuY3Rpb24gX2Jhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiBfdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJlcyA9ICcnXG4gIHZhciB0bXAgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICBpZiAoYnVmW2ldIDw9IDB4N0YpIHtcbiAgICAgIHJlcyArPSBkZWNvZGVVdGY4Q2hhcih0bXApICsgU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gICAgICB0bXAgPSAnJ1xuICAgIH0gZWxzZSB7XG4gICAgICB0bXAgKz0gJyUnICsgYnVmW2ldLnRvU3RyaW5nKDE2KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXMgKyBkZWNvZGVVdGY4Q2hhcih0bXApXG59XG5cbmZ1bmN0aW9uIF9hc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKylcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gX2JpbmFyeVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIF9hc2NpaVNsaWNlKGJ1Ziwgc3RhcnQsIGVuZClcbn1cblxuZnVuY3Rpb24gX2hleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gX3V0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSsxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSBjbGFtcChzdGFydCwgbGVuLCAwKVxuICBlbmQgPSBjbGFtcChlbmQsIGxlbiwgbGVuKVxuXG4gIGlmIChCdWZmZXIuX3VzZVR5cGVkQXJyYXlzKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5fYXVnbWVudCh0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpKVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgdmFyIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZCwgdHJ1ZSlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyBpKyspIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgICByZXR1cm4gbmV3QnVmXG4gIH1cbn1cblxuLy8gYGdldGAgd2lsbCBiZSByZW1vdmVkIGluIE5vZGUgMC4xMytcbkJ1ZmZlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKG9mZnNldCkge1xuICBjb25zb2xlLmxvZygnLmdldCgpIGlzIGRlcHJlY2F0ZWQuIEFjY2VzcyB1c2luZyBhcnJheSBpbmRleGVzIGluc3RlYWQuJylcbiAgcmV0dXJuIHRoaXMucmVhZFVJbnQ4KG9mZnNldClcbn1cblxuLy8gYHNldGAgd2lsbCBiZSByZW1vdmVkIGluIE5vZGUgMC4xMytcbkJ1ZmZlci5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHYsIG9mZnNldCkge1xuICBjb25zb2xlLmxvZygnLnNldCgpIGlzIGRlcHJlY2F0ZWQuIEFjY2VzcyB1c2luZyBhcnJheSBpbmRleGVzIGluc3RlYWQuJylcbiAgcmV0dXJuIHRoaXMud3JpdGVVSW50OCh2LCBvZmZzZXQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCA8IHRoaXMubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICB9XG5cbiAgaWYgKG9mZnNldCA+PSB0aGlzLmxlbmd0aClcbiAgICByZXR1cm5cblxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbmZ1bmN0aW9uIF9yZWFkVUludDE2IChidWYsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCArIDEgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcbiAgaWYgKG9mZnNldCA+PSBsZW4pXG4gICAgcmV0dXJuXG5cbiAgdmFyIHZhbFxuICBpZiAobGl0dGxlRW5kaWFuKSB7XG4gICAgdmFsID0gYnVmW29mZnNldF1cbiAgICBpZiAob2Zmc2V0ICsgMSA8IGxlbilcbiAgICAgIHZhbCB8PSBidWZbb2Zmc2V0ICsgMV0gPDwgOFxuICB9IGVsc2Uge1xuICAgIHZhbCA9IGJ1ZltvZmZzZXRdIDw8IDhcbiAgICBpZiAob2Zmc2V0ICsgMSA8IGxlbilcbiAgICAgIHZhbCB8PSBidWZbb2Zmc2V0ICsgMV1cbiAgfVxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkVUludDE2KHRoaXMsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkVUludDE2KHRoaXMsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiBfcmVhZFVJbnQzMiAoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgKyAzIDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gIGlmIChvZmZzZXQgPj0gbGVuKVxuICAgIHJldHVyblxuXG4gIHZhciB2YWxcbiAgaWYgKGxpdHRsZUVuZGlhbikge1xuICAgIGlmIChvZmZzZXQgKyAyIDwgbGVuKVxuICAgICAgdmFsID0gYnVmW29mZnNldCArIDJdIDw8IDE2XG4gICAgaWYgKG9mZnNldCArIDEgPCBsZW4pXG4gICAgICB2YWwgfD0gYnVmW29mZnNldCArIDFdIDw8IDhcbiAgICB2YWwgfD0gYnVmW29mZnNldF1cbiAgICBpZiAob2Zmc2V0ICsgMyA8IGxlbilcbiAgICAgIHZhbCA9IHZhbCArIChidWZbb2Zmc2V0ICsgM10gPDwgMjQgPj4+IDApXG4gIH0gZWxzZSB7XG4gICAgaWYgKG9mZnNldCArIDEgPCBsZW4pXG4gICAgICB2YWwgPSBidWZbb2Zmc2V0ICsgMV0gPDwgMTZcbiAgICBpZiAob2Zmc2V0ICsgMiA8IGxlbilcbiAgICAgIHZhbCB8PSBidWZbb2Zmc2V0ICsgMl0gPDwgOFxuICAgIGlmIChvZmZzZXQgKyAzIDwgbGVuKVxuICAgICAgdmFsIHw9IGJ1ZltvZmZzZXQgKyAzXVxuICAgIHZhbCA9IHZhbCArIChidWZbb2Zmc2V0XSA8PCAyNCA+Pj4gMClcbiAgfVxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkVUludDMyKHRoaXMsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkVUludDMyKHRoaXMsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsXG4gICAgICAgICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCA8IHRoaXMubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICB9XG5cbiAgaWYgKG9mZnNldCA+PSB0aGlzLmxlbmd0aClcbiAgICByZXR1cm5cblxuICB2YXIgbmVnID0gdGhpc1tvZmZzZXRdICYgMHg4MFxuICBpZiAobmVnKVxuICAgIHJldHVybiAoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTFcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuZnVuY3Rpb24gX3JlYWRJbnQxNiAoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgKyAxIDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gIGlmIChvZmZzZXQgPj0gbGVuKVxuICAgIHJldHVyblxuXG4gIHZhciB2YWwgPSBfcmVhZFVJbnQxNihidWYsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCB0cnVlKVxuICB2YXIgbmVnID0gdmFsICYgMHg4MDAwXG4gIGlmIChuZWcpXG4gICAgcmV0dXJuICgweGZmZmYgLSB2YWwgKyAxKSAqIC0xXG4gIGVsc2VcbiAgICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWRJbnQxNih0aGlzLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkSW50MTYodGhpcywgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIF9yZWFkSW50MzIgKGJ1Ziwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0ICsgMyA8IGJ1Zi5sZW5ndGgsICdUcnlpbmcgdG8gcmVhZCBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuICBpZiAob2Zmc2V0ID49IGxlbilcbiAgICByZXR1cm5cblxuICB2YXIgdmFsID0gX3JlYWRVSW50MzIoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgdHJ1ZSlcbiAgdmFyIG5lZyA9IHZhbCAmIDB4ODAwMDAwMDBcbiAgaWYgKG5lZylcbiAgICByZXR1cm4gKDB4ZmZmZmZmZmYgLSB2YWwgKyAxKSAqIC0xXG4gIGVsc2VcbiAgICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWRJbnQzMih0aGlzLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkSW50MzIodGhpcywgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIF9yZWFkRmxvYXQgKGJ1Ziwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCArIDMgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICB9XG5cbiAgcmV0dXJuIGllZWU3NTQucmVhZChidWYsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZEZsb2F0KHRoaXMsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWRGbG9hdCh0aGlzLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gX3JlYWREb3VibGUgKGJ1Ziwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCArIDcgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICB9XG5cbiAgcmV0dXJuIGllZWU3NTQucmVhZChidWYsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWREb3VibGUodGhpcywgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWREb3VibGUodGhpcywgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwsICdtaXNzaW5nIHZhbHVlJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgPCB0aGlzLmxlbmd0aCwgJ3RyeWluZyB0byB3cml0ZSBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gICAgdmVyaWZ1aW50KHZhbHVlLCAweGZmKVxuICB9XG5cbiAgaWYgKG9mZnNldCA+PSB0aGlzLmxlbmd0aCkgcmV0dXJuXG5cbiAgdGhpc1tvZmZzZXRdID0gdmFsdWVcbn1cblxuZnVuY3Rpb24gX3dyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsLCAnbWlzc2luZyB2YWx1ZScpXG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCArIDEgPCBidWYubGVuZ3RoLCAndHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgICB2ZXJpZnVpbnQodmFsdWUsIDB4ZmZmZilcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gIGlmIChvZmZzZXQgPj0gbGVuKVxuICAgIHJldHVyblxuXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4obGVuIC0gb2Zmc2V0LCAyKTsgaSA8IGo7IGkrKykge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9XG4gICAgICAgICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAgICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gX3dyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsLCAnbWlzc2luZyB2YWx1ZScpXG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCArIDMgPCBidWYubGVuZ3RoLCAndHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgICB2ZXJpZnVpbnQodmFsdWUsIDB4ZmZmZmZmZmYpXG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuICBpZiAob2Zmc2V0ID49IGxlbilcbiAgICByZXR1cm5cblxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGxlbiAtIG9mZnNldCwgNCk7IGkgPCBqOyBpKyspIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPVxuICAgICAgICAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCwgJ21pc3NpbmcgdmFsdWUnKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCA8IHRoaXMubGVuZ3RoLCAnVHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgICB2ZXJpZnNpbnQodmFsdWUsIDB4N2YsIC0weDgwKVxuICB9XG5cbiAgaWYgKG9mZnNldCA+PSB0aGlzLmxlbmd0aClcbiAgICByZXR1cm5cblxuICBpZiAodmFsdWUgPj0gMClcbiAgICB0aGlzLndyaXRlVUludDgodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpXG4gIGVsc2VcbiAgICB0aGlzLndyaXRlVUludDgoMHhmZiArIHZhbHVlICsgMSwgb2Zmc2V0LCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gX3dyaXRlSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwsICdtaXNzaW5nIHZhbHVlJylcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0ICsgMSA8IGJ1Zi5sZW5ndGgsICdUcnlpbmcgdG8gd3JpdGUgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICAgIHZlcmlmc2ludCh2YWx1ZSwgMHg3ZmZmLCAtMHg4MDAwKVxuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcbiAgaWYgKG9mZnNldCA+PSBsZW4pXG4gICAgcmV0dXJuXG5cbiAgaWYgKHZhbHVlID49IDApXG4gICAgX3dyaXRlVUludDE2KGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydClcbiAgZWxzZVxuICAgIF93cml0ZVVJbnQxNihidWYsIDB4ZmZmZiArIHZhbHVlICsgMSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiBfd3JpdGVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCwgJ21pc3NpbmcgdmFsdWUnKVxuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgKyAzIDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byB3cml0ZSBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gICAgdmVyaWZzaW50KHZhbHVlLCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gIGlmIChvZmZzZXQgPj0gbGVuKVxuICAgIHJldHVyblxuXG4gIGlmICh2YWx1ZSA+PSAwKVxuICAgIF93cml0ZVVJbnQzMihidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpXG4gIGVsc2VcbiAgICBfd3JpdGVVSW50MzIoYnVmLCAweGZmZmZmZmZmICsgdmFsdWUgKyAxLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIF93cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsLCAnbWlzc2luZyB2YWx1ZScpXG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCArIDMgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgICB2ZXJpZklFRUU3NTQodmFsdWUsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcbiAgaWYgKG9mZnNldCA+PSBsZW4pXG4gICAgcmV0dXJuXG5cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIF93cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCwgJ21pc3NpbmcgdmFsdWUnKVxuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgKyA3IDwgYnVmLmxlbmd0aCxcbiAgICAgICAgJ1RyeWluZyB0byB3cml0ZSBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gICAgdmVyaWZJRUVFNzU0KHZhbHVlLCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcbiAgaWYgKG9mZnNldCA+PSBsZW4pXG4gICAgcmV0dXJuXG5cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBmaWxsKHZhbHVlLCBzdGFydD0wLCBlbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uICh2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXZhbHVlKSB2YWx1ZSA9IDBcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kKSBlbmQgPSB0aGlzLmxlbmd0aFxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS5jaGFyQ29kZUF0KDApXG4gIH1cblxuICBhc3NlcnQodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsdWUpLCAndmFsdWUgaXMgbm90IGEgbnVtYmVyJylcbiAgYXNzZXJ0KGVuZCA+PSBzdGFydCwgJ2VuZCA8IHN0YXJ0JylcblxuICAvLyBGaWxsIDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVyblxuICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVyblxuXG4gIGFzc2VydChzdGFydCA+PSAwICYmIHN0YXJ0IDwgdGhpcy5sZW5ndGgsICdzdGFydCBvdXQgb2YgYm91bmRzJylcbiAgYXNzZXJ0KGVuZCA+PSAwICYmIGVuZCA8PSB0aGlzLmxlbmd0aCwgJ2VuZCBvdXQgb2YgYm91bmRzJylcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgIHRoaXNbaV0gPSB2YWx1ZVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG91dCA9IFtdXG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgb3V0W2ldID0gdG9IZXgodGhpc1tpXSlcbiAgICBpZiAoaSA9PT0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUykge1xuICAgICAgb3V0W2kgKyAxXSA9ICcuLi4nXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIG91dC5qb2luKCcgJykgKyAnPidcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGBBcnJheUJ1ZmZlcmAgd2l0aCB0aGUgKmNvcGllZCogbWVtb3J5IG9mIHRoZSBidWZmZXIgaW5zdGFuY2UuXG4gKiBBZGRlZCBpbiBOb2RlIDAuMTIuIE9ubHkgYXZhaWxhYmxlIGluIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBBcnJheUJ1ZmZlci5cbiAqL1xuQnVmZmVyLnByb3RvdHlwZS50b0FycmF5QnVmZmVyID0gZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKEJ1ZmZlci5fdXNlVHlwZWRBcnJheXMpIHtcbiAgICAgIHJldHVybiAobmV3IEJ1ZmZlcih0aGlzKSkuYnVmZmVyXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBidWYgPSBuZXcgVWludDhBcnJheSh0aGlzLmxlbmd0aClcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBidWYubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpXG4gICAgICAgIGJ1ZltpXSA9IHRoaXNbaV1cbiAgICAgIHJldHVybiBidWYuYnVmZmVyXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQnVmZmVyLnRvQXJyYXlCdWZmZXIgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXInKVxuICB9XG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxudmFyIEJQID0gQnVmZmVyLnByb3RvdHlwZVxuXG4vKipcbiAqIEF1Z21lbnQgYSBVaW50OEFycmF5ICppbnN0YW5jZSogKG5vdCB0aGUgVWludDhBcnJheSBjbGFzcyEpIHdpdGggQnVmZmVyIG1ldGhvZHNcbiAqL1xuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX2lzQnVmZmVyID0gdHJ1ZVxuXG4gIC8vIHNhdmUgcmVmZXJlbmNlIHRvIG9yaWdpbmFsIFVpbnQ4QXJyYXkgZ2V0L3NldCBtZXRob2RzIGJlZm9yZSBvdmVyd3JpdGluZ1xuICBhcnIuX2dldCA9IGFyci5nZXRcbiAgYXJyLl9zZXQgPSBhcnIuc2V0XG5cbiAgLy8gZGVwcmVjYXRlZCwgd2lsbCBiZSByZW1vdmVkIGluIG5vZGUgMC4xMytcbiAgYXJyLmdldCA9IEJQLmdldFxuICBhcnIuc2V0ID0gQlAuc2V0XG5cbiAgYXJyLndyaXRlID0gQlAud3JpdGVcbiAgYXJyLnRvU3RyaW5nID0gQlAudG9TdHJpbmdcbiAgYXJyLnRvTG9jYWxlU3RyaW5nID0gQlAudG9TdHJpbmdcbiAgYXJyLnRvSlNPTiA9IEJQLnRvSlNPTlxuICBhcnIuY29weSA9IEJQLmNvcHlcbiAgYXJyLnNsaWNlID0gQlAuc2xpY2VcbiAgYXJyLnJlYWRVSW50OCA9IEJQLnJlYWRVSW50OFxuICBhcnIucmVhZFVJbnQxNkxFID0gQlAucmVhZFVJbnQxNkxFXG4gIGFyci5yZWFkVUludDE2QkUgPSBCUC5yZWFkVUludDE2QkVcbiAgYXJyLnJlYWRVSW50MzJMRSA9IEJQLnJlYWRVSW50MzJMRVxuICBhcnIucmVhZFVJbnQzMkJFID0gQlAucmVhZFVJbnQzMkJFXG4gIGFyci5yZWFkSW50OCA9IEJQLnJlYWRJbnQ4XG4gIGFyci5yZWFkSW50MTZMRSA9IEJQLnJlYWRJbnQxNkxFXG4gIGFyci5yZWFkSW50MTZCRSA9IEJQLnJlYWRJbnQxNkJFXG4gIGFyci5yZWFkSW50MzJMRSA9IEJQLnJlYWRJbnQzMkxFXG4gIGFyci5yZWFkSW50MzJCRSA9IEJQLnJlYWRJbnQzMkJFXG4gIGFyci5yZWFkRmxvYXRMRSA9IEJQLnJlYWRGbG9hdExFXG4gIGFyci5yZWFkRmxvYXRCRSA9IEJQLnJlYWRGbG9hdEJFXG4gIGFyci5yZWFkRG91YmxlTEUgPSBCUC5yZWFkRG91YmxlTEVcbiAgYXJyLnJlYWREb3VibGVCRSA9IEJQLnJlYWREb3VibGVCRVxuICBhcnIud3JpdGVVSW50OCA9IEJQLndyaXRlVUludDhcbiAgYXJyLndyaXRlVUludDE2TEUgPSBCUC53cml0ZVVJbnQxNkxFXG4gIGFyci53cml0ZVVJbnQxNkJFID0gQlAud3JpdGVVSW50MTZCRVxuICBhcnIud3JpdGVVSW50MzJMRSA9IEJQLndyaXRlVUludDMyTEVcbiAgYXJyLndyaXRlVUludDMyQkUgPSBCUC53cml0ZVVJbnQzMkJFXG4gIGFyci53cml0ZUludDggPSBCUC53cml0ZUludDhcbiAgYXJyLndyaXRlSW50MTZMRSA9IEJQLndyaXRlSW50MTZMRVxuICBhcnIud3JpdGVJbnQxNkJFID0gQlAud3JpdGVJbnQxNkJFXG4gIGFyci53cml0ZUludDMyTEUgPSBCUC53cml0ZUludDMyTEVcbiAgYXJyLndyaXRlSW50MzJCRSA9IEJQLndyaXRlSW50MzJCRVxuICBhcnIud3JpdGVGbG9hdExFID0gQlAud3JpdGVGbG9hdExFXG4gIGFyci53cml0ZUZsb2F0QkUgPSBCUC53cml0ZUZsb2F0QkVcbiAgYXJyLndyaXRlRG91YmxlTEUgPSBCUC53cml0ZURvdWJsZUxFXG4gIGFyci53cml0ZURvdWJsZUJFID0gQlAud3JpdGVEb3VibGVCRVxuICBhcnIuZmlsbCA9IEJQLmZpbGxcbiAgYXJyLmluc3BlY3QgPSBCUC5pbnNwZWN0XG4gIGFyci50b0FycmF5QnVmZmVyID0gQlAudG9BcnJheUJ1ZmZlclxuXG4gIHJldHVybiBhcnJcbn1cblxuLy8gc2xpY2Uoc3RhcnQsIGVuZClcbmZ1bmN0aW9uIGNsYW1wIChpbmRleCwgbGVuLCBkZWZhdWx0VmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBpbmRleCAhPT0gJ251bWJlcicpIHJldHVybiBkZWZhdWx0VmFsdWVcbiAgaW5kZXggPSB+fmluZGV4OyAgLy8gQ29lcmNlIHRvIGludGVnZXIuXG4gIGlmIChpbmRleCA+PSBsZW4pIHJldHVybiBsZW5cbiAgaWYgKGluZGV4ID49IDApIHJldHVybiBpbmRleFxuICBpbmRleCArPSBsZW5cbiAgaWYgKGluZGV4ID49IDApIHJldHVybiBpbmRleFxuICByZXR1cm4gMFxufVxuXG5mdW5jdGlvbiBjb2VyY2UgKGxlbmd0aCkge1xuICAvLyBDb2VyY2UgbGVuZ3RoIHRvIGEgbnVtYmVyIChwb3NzaWJseSBOYU4pLCByb3VuZCB1cFxuICAvLyBpbiBjYXNlIGl0J3MgZnJhY3Rpb25hbCAoZS5nLiAxMjMuNDU2KSB0aGVuIGRvIGFcbiAgLy8gZG91YmxlIG5lZ2F0ZSB0byBjb2VyY2UgYSBOYU4gdG8gMC4gRWFzeSwgcmlnaHQ/XG4gIGxlbmd0aCA9IH5+TWF0aC5jZWlsKCtsZW5ndGgpXG4gIHJldHVybiBsZW5ndGggPCAwID8gMCA6IGxlbmd0aFxufVxuXG5mdW5jdGlvbiBpc0FycmF5IChzdWJqZWN0KSB7XG4gIHJldHVybiAoQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoc3ViamVjdCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ViamVjdCkgPT09ICdbb2JqZWN0IEFycmF5XSdcbiAgfSkoc3ViamVjdClcbn1cblxuZnVuY3Rpb24gaXNBcnJheWlzaCAoc3ViamVjdCkge1xuICByZXR1cm4gaXNBcnJheShzdWJqZWN0KSB8fCBCdWZmZXIuaXNCdWZmZXIoc3ViamVjdCkgfHxcbiAgICAgIHN1YmplY3QgJiYgdHlwZW9mIHN1YmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICB0eXBlb2Ygc3ViamVjdC5sZW5ndGggPT09ICdudW1iZXInXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYiA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaWYgKGIgPD0gMHg3RilcbiAgICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpKVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHN0YXJ0ID0gaVxuICAgICAgaWYgKGIgPj0gMHhEODAwICYmIGIgPD0gMHhERkZGKSBpKytcbiAgICAgIHZhciBoID0gZW5jb2RlVVJJQ29tcG9uZW50KHN0ci5zbGljZShzdGFydCwgaSsxKSkuc3Vic3RyKDEpLnNwbGl0KCclJylcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaC5sZW5ndGg7IGorKylcbiAgICAgICAgYnl0ZUFycmF5LnB1c2gocGFyc2VJbnQoaFtqXSwgMTYpKVxuICAgIH1cbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShzdHIpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICB2YXIgcG9zXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpXG4gICAgICBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGRlY29kZVV0ZjhDaGFyIChzdHIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0cilcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoMHhGRkZEKSAvLyBVVEYgOCBpbnZhbGlkIGNoYXJcbiAgfVxufVxuXG4vKlxuICogV2UgaGF2ZSB0byBtYWtlIHN1cmUgdGhhdCB0aGUgdmFsdWUgaXMgYSB2YWxpZCBpbnRlZ2VyLiBUaGlzIG1lYW5zIHRoYXQgaXRcbiAqIGlzIG5vbi1uZWdhdGl2ZS4gSXQgaGFzIG5vIGZyYWN0aW9uYWwgY29tcG9uZW50IGFuZCB0aGF0IGl0IGRvZXMgbm90XG4gKiBleGNlZWQgdGhlIG1heGltdW0gYWxsb3dlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gdmVyaWZ1aW50ICh2YWx1ZSwgbWF4KSB7XG4gIGFzc2VydCh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLCAnY2Fubm90IHdyaXRlIGEgbm9uLW51bWJlciBhcyBhIG51bWJlcicpXG4gIGFzc2VydCh2YWx1ZSA+PSAwLCAnc3BlY2lmaWVkIGEgbmVnYXRpdmUgdmFsdWUgZm9yIHdyaXRpbmcgYW4gdW5zaWduZWQgdmFsdWUnKVxuICBhc3NlcnQodmFsdWUgPD0gbWF4LCAndmFsdWUgaXMgbGFyZ2VyIHRoYW4gbWF4aW11bSB2YWx1ZSBmb3IgdHlwZScpXG4gIGFzc2VydChNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWUsICd2YWx1ZSBoYXMgYSBmcmFjdGlvbmFsIGNvbXBvbmVudCcpXG59XG5cbmZ1bmN0aW9uIHZlcmlmc2ludCAodmFsdWUsIG1heCwgbWluKSB7XG4gIGFzc2VydCh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLCAnY2Fubm90IHdyaXRlIGEgbm9uLW51bWJlciBhcyBhIG51bWJlcicpXG4gIGFzc2VydCh2YWx1ZSA8PSBtYXgsICd2YWx1ZSBsYXJnZXIgdGhhbiBtYXhpbXVtIGFsbG93ZWQgdmFsdWUnKVxuICBhc3NlcnQodmFsdWUgPj0gbWluLCAndmFsdWUgc21hbGxlciB0aGFuIG1pbmltdW0gYWxsb3dlZCB2YWx1ZScpXG4gIGFzc2VydChNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWUsICd2YWx1ZSBoYXMgYSBmcmFjdGlvbmFsIGNvbXBvbmVudCcpXG59XG5cbmZ1bmN0aW9uIHZlcmlmSUVFRTc1NCAodmFsdWUsIG1heCwgbWluKSB7XG4gIGFzc2VydCh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLCAnY2Fubm90IHdyaXRlIGEgbm9uLW51bWJlciBhcyBhIG51bWJlcicpXG4gIGFzc2VydCh2YWx1ZSA8PSBtYXgsICd2YWx1ZSBsYXJnZXIgdGhhbiBtYXhpbXVtIGFsbG93ZWQgdmFsdWUnKVxuICBhc3NlcnQodmFsdWUgPj0gbWluLCAndmFsdWUgc21hbGxlciB0aGFuIG1pbmltdW0gYWxsb3dlZCB2YWx1ZScpXG59XG5cbmZ1bmN0aW9uIGFzc2VydCAodGVzdCwgbWVzc2FnZSkge1xuICBpZiAoIXRlc3QpIHRocm93IG5ldyBFcnJvcihtZXNzYWdlIHx8ICdGYWlsZWQgYXNzZXJ0aW9uJylcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJvTWZwQW5cIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLi8uLi9ub2RlX21vZHVsZXMvZ3VscC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanNcIixcIi8uLi8uLi9ub2RlX21vZHVsZXMvZ3VscC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9idWZmZXJcIilcbn0se1wiYmFzZTY0LWpzXCI6MixcImJ1ZmZlclwiOjEsXCJpZWVlNzU0XCI6MyxcIm9NZnBBblwiOjR9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbnZhciBsb29rdXAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyc7XG5cbjsoZnVuY3Rpb24gKGV4cG9ydHMpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG4gIHZhciBBcnIgPSAodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnKVxuICAgID8gVWludDhBcnJheVxuICAgIDogQXJyYXlcblxuXHR2YXIgUExVUyAgID0gJysnLmNoYXJDb2RlQXQoMClcblx0dmFyIFNMQVNIICA9ICcvJy5jaGFyQ29kZUF0KDApXG5cdHZhciBOVU1CRVIgPSAnMCcuY2hhckNvZGVBdCgwKVxuXHR2YXIgTE9XRVIgID0gJ2EnLmNoYXJDb2RlQXQoMClcblx0dmFyIFVQUEVSICA9ICdBJy5jaGFyQ29kZUF0KDApXG5cdHZhciBQTFVTX1VSTF9TQUZFID0gJy0nLmNoYXJDb2RlQXQoMClcblx0dmFyIFNMQVNIX1VSTF9TQUZFID0gJ18nLmNoYXJDb2RlQXQoMClcblxuXHRmdW5jdGlvbiBkZWNvZGUgKGVsdCkge1xuXHRcdHZhciBjb2RlID0gZWx0LmNoYXJDb2RlQXQoMClcblx0XHRpZiAoY29kZSA9PT0gUExVUyB8fFxuXHRcdCAgICBjb2RlID09PSBQTFVTX1VSTF9TQUZFKVxuXHRcdFx0cmV0dXJuIDYyIC8vICcrJ1xuXHRcdGlmIChjb2RlID09PSBTTEFTSCB8fFxuXHRcdCAgICBjb2RlID09PSBTTEFTSF9VUkxfU0FGRSlcblx0XHRcdHJldHVybiA2MyAvLyAnLydcblx0XHRpZiAoY29kZSA8IE5VTUJFUilcblx0XHRcdHJldHVybiAtMSAvL25vIG1hdGNoXG5cdFx0aWYgKGNvZGUgPCBOVU1CRVIgKyAxMClcblx0XHRcdHJldHVybiBjb2RlIC0gTlVNQkVSICsgMjYgKyAyNlxuXHRcdGlmIChjb2RlIDwgVVBQRVIgKyAyNilcblx0XHRcdHJldHVybiBjb2RlIC0gVVBQRVJcblx0XHRpZiAoY29kZSA8IExPV0VSICsgMjYpXG5cdFx0XHRyZXR1cm4gY29kZSAtIExPV0VSICsgMjZcblx0fVxuXG5cdGZ1bmN0aW9uIGI2NFRvQnl0ZUFycmF5IChiNjQpIHtcblx0XHR2YXIgaSwgaiwgbCwgdG1wLCBwbGFjZUhvbGRlcnMsIGFyclxuXG5cdFx0aWYgKGI2NC5sZW5ndGggJSA0ID4gMCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0Jylcblx0XHR9XG5cblx0XHQvLyB0aGUgbnVtYmVyIG9mIGVxdWFsIHNpZ25zIChwbGFjZSBob2xkZXJzKVxuXHRcdC8vIGlmIHRoZXJlIGFyZSB0d28gcGxhY2Vob2xkZXJzLCB0aGFuIHRoZSB0d28gY2hhcmFjdGVycyBiZWZvcmUgaXRcblx0XHQvLyByZXByZXNlbnQgb25lIGJ5dGVcblx0XHQvLyBpZiB0aGVyZSBpcyBvbmx5IG9uZSwgdGhlbiB0aGUgdGhyZWUgY2hhcmFjdGVycyBiZWZvcmUgaXQgcmVwcmVzZW50IDIgYnl0ZXNcblx0XHQvLyB0aGlzIGlzIGp1c3QgYSBjaGVhcCBoYWNrIHRvIG5vdCBkbyBpbmRleE9mIHR3aWNlXG5cdFx0dmFyIGxlbiA9IGI2NC5sZW5ndGhcblx0XHRwbGFjZUhvbGRlcnMgPSAnPScgPT09IGI2NC5jaGFyQXQobGVuIC0gMikgPyAyIDogJz0nID09PSBiNjQuY2hhckF0KGxlbiAtIDEpID8gMSA6IDBcblxuXHRcdC8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuXHRcdGFyciA9IG5ldyBBcnIoYjY0Lmxlbmd0aCAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzKVxuXG5cdFx0Ly8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuXHRcdGwgPSBwbGFjZUhvbGRlcnMgPiAwID8gYjY0Lmxlbmd0aCAtIDQgOiBiNjQubGVuZ3RoXG5cblx0XHR2YXIgTCA9IDBcblxuXHRcdGZ1bmN0aW9uIHB1c2ggKHYpIHtcblx0XHRcdGFycltMKytdID0gdlxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbDsgaSArPSA0LCBqICs9IDMpIHtcblx0XHRcdHRtcCA9IChkZWNvZGUoYjY0LmNoYXJBdChpKSkgPDwgMTgpIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAxKSkgPDwgMTIpIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAyKSkgPDwgNikgfCBkZWNvZGUoYjY0LmNoYXJBdChpICsgMykpXG5cdFx0XHRwdXNoKCh0bXAgJiAweEZGMDAwMCkgPj4gMTYpXG5cdFx0XHRwdXNoKCh0bXAgJiAweEZGMDApID4+IDgpXG5cdFx0XHRwdXNoKHRtcCAmIDB4RkYpXG5cdFx0fVxuXG5cdFx0aWYgKHBsYWNlSG9sZGVycyA9PT0gMikge1xuXHRcdFx0dG1wID0gKGRlY29kZShiNjQuY2hhckF0KGkpKSA8PCAyKSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMSkpID4+IDQpXG5cdFx0XHRwdXNoKHRtcCAmIDB4RkYpXG5cdFx0fSBlbHNlIGlmIChwbGFjZUhvbGRlcnMgPT09IDEpIHtcblx0XHRcdHRtcCA9IChkZWNvZGUoYjY0LmNoYXJBdChpKSkgPDwgMTApIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAxKSkgPDwgNCkgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDIpKSA+PiAyKVxuXHRcdFx0cHVzaCgodG1wID4+IDgpICYgMHhGRilcblx0XHRcdHB1c2godG1wICYgMHhGRilcblx0XHR9XG5cblx0XHRyZXR1cm4gYXJyXG5cdH1cblxuXHRmdW5jdGlvbiB1aW50OFRvQmFzZTY0ICh1aW50OCkge1xuXHRcdHZhciBpLFxuXHRcdFx0ZXh0cmFCeXRlcyA9IHVpbnQ4Lmxlbmd0aCAlIDMsIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG5cdFx0XHRvdXRwdXQgPSBcIlwiLFxuXHRcdFx0dGVtcCwgbGVuZ3RoXG5cblx0XHRmdW5jdGlvbiBlbmNvZGUgKG51bSkge1xuXHRcdFx0cmV0dXJuIGxvb2t1cC5jaGFyQXQobnVtKVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG5cdFx0XHRyZXR1cm4gZW5jb2RlKG51bSA+PiAxOCAmIDB4M0YpICsgZW5jb2RlKG51bSA+PiAxMiAmIDB4M0YpICsgZW5jb2RlKG51bSA+PiA2ICYgMHgzRikgKyBlbmNvZGUobnVtICYgMHgzRilcblx0XHR9XG5cblx0XHQvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG5cdFx0Zm9yIChpID0gMCwgbGVuZ3RoID0gdWludDgubGVuZ3RoIC0gZXh0cmFCeXRlczsgaSA8IGxlbmd0aDsgaSArPSAzKSB7XG5cdFx0XHR0ZW1wID0gKHVpbnQ4W2ldIDw8IDE2KSArICh1aW50OFtpICsgMV0gPDwgOCkgKyAodWludDhbaSArIDJdKVxuXHRcdFx0b3V0cHV0ICs9IHRyaXBsZXRUb0Jhc2U2NCh0ZW1wKVxuXHRcdH1cblxuXHRcdC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcblx0XHRzd2l0Y2ggKGV4dHJhQnl0ZXMpIHtcblx0XHRcdGNhc2UgMTpcblx0XHRcdFx0dGVtcCA9IHVpbnQ4W3VpbnQ4Lmxlbmd0aCAtIDFdXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUodGVtcCA+PiAyKVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKCh0ZW1wIDw8IDQpICYgMHgzRilcblx0XHRcdFx0b3V0cHV0ICs9ICc9PSdcblx0XHRcdFx0YnJlYWtcblx0XHRcdGNhc2UgMjpcblx0XHRcdFx0dGVtcCA9ICh1aW50OFt1aW50OC5sZW5ndGggLSAyXSA8PCA4KSArICh1aW50OFt1aW50OC5sZW5ndGggLSAxXSlcblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSh0ZW1wID4+IDEwKVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKCh0ZW1wID4+IDQpICYgMHgzRilcblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSgodGVtcCA8PCAyKSAmIDB4M0YpXG5cdFx0XHRcdG91dHB1dCArPSAnPSdcblx0XHRcdFx0YnJlYWtcblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0XG5cdH1cblxuXHRleHBvcnRzLnRvQnl0ZUFycmF5ID0gYjY0VG9CeXRlQXJyYXlcblx0ZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gdWludDhUb0Jhc2U2NFxufSh0eXBlb2YgZXhwb3J0cyA9PT0gJ3VuZGVmaW5lZCcgPyAodGhpcy5iYXNlNjRqcyA9IHt9KSA6IGV4cG9ydHMpKVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcIm9NZnBBblwiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9ndWxwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2J1ZmZlci9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2xpYi9iNjQuanNcIixcIi8uLi8uLi9ub2RlX21vZHVsZXMvZ3VscC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9idWZmZXIvbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9saWJcIilcbn0se1wiYnVmZmVyXCI6MSxcIm9NZnBBblwiOjR9XSwzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbmV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcIm9NZnBBblwiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9ndWxwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2J1ZmZlci9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qc1wiLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9ndWxwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2J1ZmZlci9ub2RlX21vZHVsZXMvaWVlZTc1NFwiKVxufSx7XCJidWZmZXJcIjoxLFwib01mcEFuXCI6NH1dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxucHJvY2Vzcy5uZXh0VGljayA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNhblNldEltbWVkaWF0ZSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnNldEltbWVkaWF0ZTtcbiAgICB2YXIgY2FuUG9zdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnBvc3RNZXNzYWdlICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyXG4gICAgO1xuXG4gICAgaWYgKGNhblNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGYpIHsgcmV0dXJuIHdpbmRvdy5zZXRJbW1lZGlhdGUoZikgfTtcbiAgICB9XG5cbiAgICBpZiAoY2FuUG9zdCkge1xuICAgICAgICB2YXIgcXVldWUgPSBbXTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBldi5zb3VyY2U7XG4gICAgICAgICAgICBpZiAoKHNvdXJjZSA9PT0gd2luZG93IHx8IHNvdXJjZSA9PT0gbnVsbCkgJiYgZXYuZGF0YSA9PT0gJ3Byb2Nlc3MtdGljaycpIHtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm4gPSBxdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgICAgICBxdWV1ZS5wdXNoKGZuKTtcbiAgICAgICAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZSgncHJvY2Vzcy10aWNrJywgJyonKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcbiAgICAgICAgc2V0VGltZW91dChmbiwgMCk7XG4gICAgfTtcbn0pKCk7XG5cbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufVxuXG4vLyBUT0RPKHNodHlsbWFuKVxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwib01mcEFuXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2d1bHAtYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCIsXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2d1bHAtYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzc1wiKVxufSx7XCJidWZmZXJcIjoxLFwib01mcEFuXCI6NH1dLDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBwKSB7XG4gIGFwcC5jb25maWcoWydzbmFwUmVtb3RlUHJvdmlkZXInLCBmdW5jdGlvbiAoc25hcFJlbW90ZVByb3ZpZGVyKSB7XG4gICAgc25hcFJlbW90ZVByb3ZpZGVyLmdsb2JhbE9wdGlvbnMgPSB7XG4gICAgICBkaXNhYmxlOiAncmlnaHQnLFxuICAgICAgdGFwVG9DbG9zZTogdHJ1ZVxuICAgIH07XG4gIH1dKVxufTtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwib01mcEFuXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvY29uZmlnL2luZGV4LmpzXCIsXCIvY29uZmlnXCIpXG59LHtcImJ1ZmZlclwiOjEsXCJvTWZwQW5cIjo0fV0sNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFwcCkge1xuICBhcHAuY29uc3RhbnQoJ2NvbW1vbkNvbnN0YW50cycsIHtcbiAgICBsb2NhbDogJ2h0dHA6Ly8xOTIuMTY4LjAuMTIwOjgwMTEvJyxcbiAgICBwcm9kdWN0aW9uOiAnaHR0cDovL2lkZW1pbmQtYXBpLmhlcm9rdWFwcC5jb20vJyxcbiAgICB0b2tlbjogJ2FlMzNkNmZhY2UzZDBhODg4MjA1OWUyNTgzNzI1Yjc4NmMyYzRmYjk2ZTdjNTgwNWI0Y2RiMDU5MDI5MmVkZmMnXG4gIH0pXG59O1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJvTWZwQW5cIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi9jb25zdGFudHMvY29tbW9uQ29uc3RhbnRzLmpzXCIsXCIvY29uc3RhbnRzXCIpXG59LHtcImJ1ZmZlclwiOjEsXCJvTWZwQW5cIjo0fV0sNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG52YXIgY29uc3RhbnRzID0gYW5ndWxhci5tb2R1bGUoJ3pzQ29uc3RhbnRzJyxbXSk7XG5cbnJlcXVpcmUoJy4vY29tbW9uQ29uc3RhbnRzJykoY29uc3RhbnRzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb25zdGFudHM7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwib01mcEFuXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvY29uc3RhbnRzL2luZGV4LmpzXCIsXCIvY29uc3RhbnRzXCIpXG59LHtcIi4vY29tbW9uQ29uc3RhbnRzXCI6NixcImJ1ZmZlclwiOjEsXCJvTWZwQW5cIjo0fV0sODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG4ndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4vY29uc3RhbnRzJyk7XG5yZXF1aXJlKCcuL3Nlc3Npb24nKTtcbnJlcXVpcmUoJy4vaG9tZScpO1xuXG52YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ25nWmVyb1N0YXRlTW9iaWxlQXBwJywgWyd1aS5yb3V0ZXInLCdzbmFwJywnenNTZXNzaW9uJywgJ3pzSG9tZSddKTtcblxucmVxdWlyZSgnLi9yb3V0ZXMnKShhcHApO1xucmVxdWlyZSgnLi9jb25maWcnKShhcHApO1xuXG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwib01mcEFuXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvZmFrZV8yZDFkMjYzMy5qc1wiLFwiL1wiKVxufSx7XCIuL2NvbmZpZ1wiOjUsXCIuL2NvbnN0YW50c1wiOjcsXCIuL2hvbWVcIjoxMCxcIi4vcm91dGVzXCI6MTEsXCIuL3Nlc3Npb25cIjoxMixcImJ1ZmZlclwiOjEsXCJvTWZwQW5cIjo0fV0sOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChob21lKSB7XG4gIGhvbWUuY29udHJvbGxlcignaG9tZUNvbnRyb2xsZXInLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJ3Nlc3Npb25TZXJ2aWNlJywnbG9jYWxTdG9yYWdlU2VydmljZScsXG4gICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgc2Vzc2lvblNlcnZpY2UsIGxvY2FsU3RvcmFnZVNlcnZpY2UpIHtcblxuICAgICAgc2Vzc2lvblNlcnZpY2UuYXV0aG9yaXplKCk7XG5cbiAgICAgICRyb290U2NvcGUuc2lnbm91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXNzaW9uU2VydmljZS5yZW1vdmVDdXJyZW50VXNlcigpO1xuICAgICAgfTtcblxuICAgICAgJHNjb3BlLnRlc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlc3Npb25TZXJ2aWNlLnRlc3QoKVxuICAgICAgfVxuXG4gICAgfV0pO1xufTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJvTWZwQW5cIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi9ob21lL2hvbWVDb250cm9sbGVyLmpzXCIsXCIvaG9tZVwiKVxufSx7XCJidWZmZXJcIjoxLFwib01mcEFuXCI6NH1dLDEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbnZhciBob21lID0gYW5ndWxhci5tb2R1bGUoJ3pzSG9tZScsW10pO1xuXG5yZXF1aXJlKCcuL2hvbWVDb250cm9sbGVyJykoaG9tZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gaG9tZTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJvTWZwQW5cIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi9ob21lL2luZGV4LmpzXCIsXCIvaG9tZVwiKVxufSx7XCIuL2hvbWVDb250cm9sbGVyXCI6OSxcImJ1ZmZlclwiOjEsXCJvTWZwQW5cIjo0fV0sMTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcHApIHtcbiAgYXBwLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlcicsICckbG9jYXRpb25Qcm92aWRlcicsXG4gICAgICBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcbiAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnL3BsYXRmb3Jtcy9pb3Mvd3d3L2luZGV4Lmh0bWwnKTtcblxuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgIC5zdGF0ZSgnaG9tZScsIHtcbiAgICAgICAgICAgIHVybDogJy9wbGF0Zm9ybXMvaW9zL3d3dy9pbmRleC5odG1sJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcInRlbXBsYXRlcy9ob21lLmh0bWxcIixcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwiaG9tZUNvbnRyb2xsZXJcIlxuICAgICAgICAgIH0pXG4gICAgICAgICAgLnN0YXRlKFwic2lnbmluXCIsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcInRlbXBsYXRlcy9zaWduaW4uaHRtbFwiLFxuICAgICAgICAgICAgY29udHJvbGxlcjogXCJzaWduaW5Db250cm9sbGVyXCJcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5zdGF0ZShcInNpZ251cFwiLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJ0ZW1wbGF0ZXMvc2lnbnVwLmh0bWxcIixcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwic2lnbnVwQ29udHJvbGxlclwiXG4gICAgICAgICAgfSlcbiAgICAgIH1cbiAgICBdXG4gICk7XG59O1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJvTWZwQW5cIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi9yb3V0ZXMvaW5kZXguanNcIixcIi9yb3V0ZXNcIilcbn0se1wiYnVmZmVyXCI6MSxcIm9NZnBBblwiOjR9XSwxMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG52YXIgc2Vzc2lvbiA9IGFuZ3VsYXIubW9kdWxlKCd6c1Nlc3Npb24nLFsnenNDb25zdGFudHMnLCdMb2NhbFN0b3JhZ2VNb2R1bGUnXSk7XG5cbnJlcXVpcmUoJy4vc2Vzc2lvblNlcnZpY2UnKShzZXNzaW9uKTtcbnJlcXVpcmUoJy4vc2lnbmluU2VydmljZScpKHNlc3Npb24pO1xucmVxdWlyZSgnLi9zaWduaW5Db250cm9sbGVyJykoc2Vzc2lvbik7XG5yZXF1aXJlKCcuL3NpZ251cFNlcnZpY2UnKShzZXNzaW9uKTtcbnJlcXVpcmUoJy4vc2lnbnVwQ29udHJvbGxlcicpKHNlc3Npb24pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNlc3Npb247XG59KS5jYWxsKHRoaXMscmVxdWlyZShcIm9NZnBBblwiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiL3Nlc3Npb24vaW5kZXguanNcIixcIi9zZXNzaW9uXCIpXG59LHtcIi4vc2Vzc2lvblNlcnZpY2VcIjoxMyxcIi4vc2lnbmluQ29udHJvbGxlclwiOjE0LFwiLi9zaWduaW5TZXJ2aWNlXCI6MTUsXCIuL3NpZ251cENvbnRyb2xsZXJcIjoxNixcIi4vc2lnbnVwU2VydmljZVwiOjE3LFwiYnVmZmVyXCI6MSxcIm9NZnBBblwiOjR9XSwxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwcCkge1xuICBhcHAuc2VydmljZSgnc2Vzc2lvblNlcnZpY2UnLCBbJyRodHRwJywgJyRyb290U2NvcGUnLCdjb21tb25Db25zdGFudHMnLCAnbG9jYWxTdG9yYWdlU2VydmljZScsXG4gICAgZnVuY3Rpb24gKCRodHRwLCAkcm9vdFNjb3BlLCBjb21tb25Db25zdGFudHMsIGxvY2FsU3RvcmFnZVNlcnZpY2UpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgc2VsZi5hdXRob3JpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmKF8uaXNOdWxsKGxvY2FsU3RvcmFnZVNlcnZpY2UuZ2V0KCdzZXNzaW9uSWQnKSkpIHJldHVybjtcblxuICAgICAgICAkaHR0cC5nZXQoY29tbW9uQ29uc3RhbnRzLnByb2R1Y3Rpb24gKyAnYXV0aD9zZXNzaW9uSWQ9JyArIHNlbGYuc2Vzc2lvblVzZXIoKSArICcmdG9rZW49JyArIGNvbW1vbkNvbnN0YW50cy50b2tlbikudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICBzZWxmLnNhdmVVc2VyKHJlcy5kYXRhKTtcbiAgICAgICAgICAkcm9vdFNjb3BlLnVzZXIgPSBzZWxmLmdldEN1cnJlbnRVc2VyKCk7XG4gICAgICAgICAgY29uc29sZS5sb2coJHJvb3RTY29wZS51c2VyKVxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIHNlbGYuc2F2ZVVzZXIgPSBmdW5jdGlvbiAodXNlcikge1xuICAgICAgICBsb2NhbFN0b3JhZ2VTZXJ2aWNlLnNldCgnZW1haWwnLCB1c2VyLmVtYWlsKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlU2VydmljZS5zZXQoJ3N0YXR1cycsICFfLmlzVW5kZWZpbmVkKHVzZXIuY29uZmlybWVkRW1haWwpKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlU2VydmljZS5zZXQoJ3Nlc3Npb25JZCcsIHVzZXIuc2Vzc2lvbklkKTtcbiAgICAgIH07XG5cbiAgICAgIHNlbGYuZ2V0Q3VycmVudFVzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZW1haWw6IGxvY2FsU3RvcmFnZVNlcnZpY2UuZ2V0KCdlbWFpbCcpLFxuICAgICAgICAgIHN0YXR1czogbG9jYWxTdG9yYWdlU2VydmljZS5nZXQoJ3N0YXR1cycpLFxuICAgICAgICAgIHNlc3Npb246IGxvY2FsU3RvcmFnZVNlcnZpY2UuZ2V0KCdzZXNzaW9uSWQnKVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBzZWxmLnJlbW92ZUN1cnJlbnRVc2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkaHR0cC5kZWxldGUoY29tbW9uQ29uc3RhbnRzLnByb2R1Y3Rpb24gKyAnYXV0aD9zZXNzaW9uSWQ9JyArIHNlbGYuc2Vzc2lvblVzZXIoKSArICcmdG9rZW49JyArIGNvbW1vbkNvbnN0YW50cy50b2tlbikudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2VTZXJ2aWNlLnJlbW92ZSgnZW1haWwnKTtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2VTZXJ2aWNlLnJlbW92ZSgnc3RhdHVzJyk7XG4gICAgICAgICAgbG9jYWxTdG9yYWdlU2VydmljZS5yZW1vdmUoJ3Nlc3Npb25JZCcpO1xuICAgICAgICAgICRyb290U2NvcGUudXNlciA9IG51bGw7XG4gICAgICAgIH0pXG4gICAgICB9O1xuXG5cbiAgICAgIHNlbGYuc2Vzc2lvblVzZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGlkID0gbG9jYWxTdG9yYWdlU2VydmljZS5nZXQoJ3Nlc3Npb25JZCcpO1xuICAgICAgICByZXR1cm4gXy5pc051bGwoaWQpID8gJycgOiBpZDtcbiAgICAgIH07XG4gICAgfV0pXG59O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcIm9NZnBBblwiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiL3Nlc3Npb24vc2Vzc2lvblNlcnZpY2UuanNcIixcIi9zZXNzaW9uXCIpXG59LHtcImJ1ZmZlclwiOjEsXCJvTWZwQW5cIjo0fV0sMTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcHApIHtcbiAgYXBwLmNvbnRyb2xsZXIoJ3NpZ25pbkNvbnRyb2xsZXInLCBbJyRzY29wZScsICckc3RhdGUnLCAnc2lnbmluU2VydmljZScsXG4gICAgZnVuY3Rpb24gKCRzY29wZSwgJHN0YXRlLCBzaWduaW5TZXJ2aWNlKSB7XG4gICAgICAkc2NvcGUuc3VibWl0dGVkID0gZmFsc2U7XG5cbiAgICAgICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbiAodXNlciwgZm9ybSkge1xuICAgICAgICBpZihmb3JtLiRpbnZhbGlkKSB7XG4gICAgICAgICAgJHNjb3BlLnN1Ym1pdHRlZCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2lnbmluU2VydmljZS5zaWduaW4odXNlcilcbiAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkc3RhdGUuZ28oJ2hvbWUnKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG5cbiAgICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfV0pO1xufTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJvTWZwQW5cIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi9zZXNzaW9uL3NpZ25pbkNvbnRyb2xsZXIuanNcIixcIi9zZXNzaW9uXCIpXG59LHtcImJ1ZmZlclwiOjEsXCJvTWZwQW5cIjo0fV0sMTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcHApIHtcbiAgYXBwLnNlcnZpY2UoJ3NpZ25pblNlcnZpY2UnLCBbJyRodHRwJywgJyRxJywnY29tbW9uQ29uc3RhbnRzJywnc2Vzc2lvblNlcnZpY2UnLCBmdW5jdGlvbiAoJGh0dHAsICRxLCBjb21tb25Db25zdGFudHMsIHNlc3Npb25TZXJ2aWNlKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgc2VsZi5zaWduaW4gPSBmdW5jdGlvbiAodXNlcikge1xuICAgICAgdmFyIGRlZmVyID0gJHEuZGVmZXIoKTtcblxuICAgICAgJGh0dHAuZ2V0KGNvbW1vbkNvbnN0YW50cy5wcm9kdWN0aW9uICsgJ2F1dGg/c2Vzc2lvbj0nKyBzZXNzaW9uU2VydmljZS5zZXNzaW9uVXNlcigpICsgJyZ0b2tlbj0nICsgY29tbW9uQ29uc3RhbnRzLnRva2VuICsgJyZlbWFpbD0nICsgdXNlci5lbWFpbCArICcmcGFzc3dvcmQ9JyArIHVzZXIucGFzc3dvcmQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICBzZXNzaW9uU2VydmljZS5zYXZlVXNlcihyZXMuZGF0YSk7XG4gICAgICAgICAgZGVmZXIucmVzb2x2ZSh1c2VyKTtcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgZGVmZXIucmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZGVmZXIucHJvbWlzZTtcbiAgICB9XG5cbiAgfV0pXG59O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcIm9NZnBBblwiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiL3Nlc3Npb24vc2lnbmluU2VydmljZS5qc1wiLFwiL3Nlc3Npb25cIilcbn0se1wiYnVmZmVyXCI6MSxcIm9NZnBBblwiOjR9XSwxNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcHApIHtcbiAgYXBwLmNvbnRyb2xsZXIoJ3NpZ251cENvbnRyb2xsZXInLCBbJyRzY29wZScsICckc3RhdGUnLCAnc2lnbnVwU2VydmljZScsIGZ1bmN0aW9uICgkc2NvcGUsICRzdGF0ZSwgc2lnbnVwU2VydmljZSkge1xuICAgICRzY29wZS5zdWJtaXR0ZWQgPSBmYWxzZTtcblxuICAgICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbiAodXNlciwgZm9ybSkge1xuICAgICAgaWYoZm9ybS4kaW52YWxpZCkge1xuICAgICAgICAkc2NvcGUuc3VibWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2lnbnVwU2VydmljZS5zaWdudXAodXNlcilcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICRzdGF0ZS5nbygnaG9tZScpO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdTb21ldGhpbmcgd2VudCB3cm9uZyEnKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgfV0pO1xufTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJvTWZwQW5cIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi9zZXNzaW9uL3NpZ251cENvbnRyb2xsZXIuanNcIixcIi9zZXNzaW9uXCIpXG59LHtcImJ1ZmZlclwiOjEsXCJvTWZwQW5cIjo0fV0sMTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcHApIHtcbiAgYXBwLnNlcnZpY2UoJ3NpZ251cFNlcnZpY2UnLCBbJyRodHRwJywgJyRxJywgJ2NvbW1vbkNvbnN0YW50cycsICdzZXNzaW9uU2VydmljZScsXG4gICAgZnVuY3Rpb24gKCRodHRwLCAkcSwgY29tbW9uQ29uc3RhbnRzLCBzZXNzaW9uU2VydmljZSkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgc2VsZi5zaWdudXAgPSBmdW5jdGlvbiAodXNlcikge1xuICAgICAgICB2YXIgZGVmZXIgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICRodHRwLnBvc3QoY29tbW9uQ29uc3RhbnRzLnByb2R1Y3Rpb24gKyAnYXV0aD90b2tlbj0nICsgY29tbW9uQ29uc3RhbnRzLnRva2VuLCB1c2VyKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICBkZWZlci5yZXNvbHZlKHJlcyk7XG4gICAgICAgICAgc2Vzc2lvblNlcnZpY2Uuc2F2ZVVzZXIocmVzLmRhdGEpO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgZGVmZXIucmVqZWN0KGVycilcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGRlZmVyLnByb21pc2U7XG4gICAgICB9O1xuICAgIH1dKVxufTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJvTWZwQW5cIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi9zZXNzaW9uL3NpZ251cFNlcnZpY2UuanNcIixcIi9zZXNzaW9uXCIpXG59LHtcImJ1ZmZlclwiOjEsXCJvTWZwQW5cIjo0fV19LHt9LFs4XSkiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
