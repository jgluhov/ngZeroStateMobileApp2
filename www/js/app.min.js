!function e(n,t,r){function o(s,a){if(!t[s]){if(!n[s]){var u="function"==typeof require&&require;if(!a&&u)return u(s,!0);if(i)return i(s,!0);throw new Error("Cannot find module '"+s+"'")}var f=t[s]={exports:{}};n[s][0].call(f.exports,function(e){var t=n[s][1][e];return o(t?t:e)},f,f.exports,e,n,t,r)}return t[s].exports}for(var i="function"==typeof require&&require,s=0;s<r.length;s++)o(r[s]);return o}({1:[function(e,n,t){(function(n,r,o,i,s,a,u,f,l){function o(e,n,t){if(!(this instanceof o))return new o(e,n,t);var r=typeof e;if("base64"===n&&"string"===r)for(e=z(e);e.length%4!==0;)e+="=";var i;if("number"===r)i=N(e);else if("string"===r)i=o.byteLength(e,n);else{if("object"!==r)throw new Error("First argument needs to be a number, array or string.");i=N(e.length)}var s;o._useTypedArrays?s=o._augment(new Uint8Array(i)):(s=this,s.length=i,s._isBuffer=!0);var a;if(o._useTypedArrays&&"number"==typeof e.byteLength)s._set(e);else if(F(e))for(a=0;i>a;a++)o.isBuffer(e)?s[a]=e.readUInt8(a):s[a]=e[a];else if("string"===r)s.write(e,0,n);else if("number"===r&&!o._useTypedArrays&&!t)for(a=0;i>a;a++)s[a]=0;return s}function c(e,n,t,r){t=Number(t)||0;var i=e.length-t;r?(r=Number(r),r>i&&(r=i)):r=i;var s=n.length;Z(s%2===0,"Invalid hex string"),r>s/2&&(r=s/2);for(var a=0;r>a;a++){var u=parseInt(n.substr(2*a,2),16);Z(!isNaN(u),"Invalid hex string"),e[t+a]=u}return o._charsWritten=2*a,a}function d(e,n,t,r){var i=o._charsWritten=R(q(n),e,t,r);return i}function g(e,n,t,r){var i=o._charsWritten=R(H(n),e,t,r);return i}function p(e,n,t,r){return g(e,n,t,r)}function h(e,n,t,r){var i=o._charsWritten=R(W(n),e,t,r);return i}function m(e,n,t,r){var i=o._charsWritten=R(P(n),e,t,r);return i}function w(e,n,t){return 0===n&&t===e.length?G.fromByteArray(e):G.fromByteArray(e.slice(n,t))}function y(e,n,t){var r="",o="";t=Math.min(e.length,t);for(var i=n;t>i;i++)e[i]<=127?(r+=J(o)+String.fromCharCode(e[i]),o=""):o+="%"+e[i].toString(16);return r+J(o)}function v(e,n,t){var r="";t=Math.min(e.length,t);for(var o=n;t>o;o++)r+=String.fromCharCode(e[o]);return r}function b(e,n,t){return v(e,n,t)}function A(e,n,t){var r=e.length;(!n||0>n)&&(n=0),(!t||0>t||t>r)&&(t=r);for(var o="",i=n;t>i;i++)o+=O(e[i]);return o}function E(e,n,t){for(var r=e.slice(n,t),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function C(e,n,t,r){r||(Z("boolean"==typeof t,"missing or invalid endian"),Z(void 0!==n&&null!==n,"missing offset"),Z(n+1<e.length,"Trying to read beyond buffer length"));var o=e.length;if(!(n>=o)){var i;return t?(i=e[n],o>n+1&&(i|=e[n+1]<<8)):(i=e[n]<<8,o>n+1&&(i|=e[n+1])),i}}function B(e,n,t,r){r||(Z("boolean"==typeof t,"missing or invalid endian"),Z(void 0!==n&&null!==n,"missing offset"),Z(n+3<e.length,"Trying to read beyond buffer length"));var o=e.length;if(!(n>=o)){var i;return t?(o>n+2&&(i=e[n+2]<<16),o>n+1&&(i|=e[n+1]<<8),i|=e[n],o>n+3&&(i+=e[n+3]<<24>>>0)):(o>n+1&&(i=e[n+1]<<16),o>n+2&&(i|=e[n+2]<<8),o>n+3&&(i|=e[n+3]),i+=e[n]<<24>>>0),i}}function I(e,n,t,r){r||(Z("boolean"==typeof t,"missing or invalid endian"),Z(void 0!==n&&null!==n,"missing offset"),Z(n+1<e.length,"Trying to read beyond buffer length"));var o=e.length;if(!(n>=o)){var i=C(e,n,t,!0),s=32768&i;return s?-1*(65535-i+1):i}}function M(e,n,t,r){r||(Z("boolean"==typeof t,"missing or invalid endian"),Z(void 0!==n&&null!==n,"missing offset"),Z(n+3<e.length,"Trying to read beyond buffer length"));var o=e.length;if(!(n>=o)){var i=B(e,n,t,!0),s=2147483648&i;return s?-1*(4294967295-i+1):i}}function _(e,n,t,r){return r||(Z("boolean"==typeof t,"missing or invalid endian"),Z(n+3<e.length,"Trying to read beyond buffer length")),K.read(e,n,t,23,4)}function x(e,n,t,r){return r||(Z("boolean"==typeof t,"missing or invalid endian"),Z(n+7<e.length,"Trying to read beyond buffer length")),K.read(e,n,t,52,8)}function U(e,n,t,r,o){o||(Z(void 0!==n&&null!==n,"missing value"),Z("boolean"==typeof r,"missing or invalid endian"),Z(void 0!==t&&null!==t,"missing offset"),Z(t+1<e.length,"trying to write beyond buffer length"),X(n,65535));var i=e.length;if(!(t>=i))for(var s=0,a=Math.min(i-t,2);a>s;s++)e[t+s]=(n&255<<8*(r?s:1-s))>>>8*(r?s:1-s)}function k(e,n,t,r,o){o||(Z(void 0!==n&&null!==n,"missing value"),Z("boolean"==typeof r,"missing or invalid endian"),Z(void 0!==t&&null!==t,"missing offset"),Z(t+3<e.length,"trying to write beyond buffer length"),X(n,4294967295));var i=e.length;if(!(t>=i))for(var s=0,a=Math.min(i-t,4);a>s;s++)e[t+s]=n>>>8*(r?s:3-s)&255}function S(e,n,t,r,o){o||(Z(void 0!==n&&null!==n,"missing value"),Z("boolean"==typeof r,"missing or invalid endian"),Z(void 0!==t&&null!==t,"missing offset"),Z(t+1<e.length,"Trying to write beyond buffer length"),Y(n,32767,-32768));var i=e.length;t>=i||(n>=0?U(e,n,t,r,o):U(e,65535+n+1,t,r,o))}function L(e,n,t,r,o){o||(Z(void 0!==n&&null!==n,"missing value"),Z("boolean"==typeof r,"missing or invalid endian"),Z(void 0!==t&&null!==t,"missing offset"),Z(t+3<e.length,"Trying to write beyond buffer length"),Y(n,2147483647,-2147483648));var i=e.length;t>=i||(n>=0?k(e,n,t,r,o):k(e,4294967295+n+1,t,r,o))}function j(e,n,t,r,o){o||(Z(void 0!==n&&null!==n,"missing value"),Z("boolean"==typeof r,"missing or invalid endian"),Z(void 0!==t&&null!==t,"missing offset"),Z(t+3<e.length,"Trying to write beyond buffer length"),V(n,3.4028234663852886e38,-3.4028234663852886e38));var i=e.length;t>=i||K.write(e,n,t,r,23,4)}function T(e,n,t,r,o){o||(Z(void 0!==n&&null!==n,"missing value"),Z("boolean"==typeof r,"missing or invalid endian"),Z(void 0!==t&&null!==t,"missing offset"),Z(t+7<e.length,"Trying to write beyond buffer length"),V(n,1.7976931348623157e308,-1.7976931348623157e308));var i=e.length;t>=i||K.write(e,n,t,r,52,8)}function z(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function $(e,n,t){return"number"!=typeof e?t:(e=~~e,e>=n?n:e>=0?e:(e+=n,e>=0?e:0))}function N(e){return e=~~Math.ceil(+e),0>e?0:e}function D(e){return(Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)})(e)}function F(e){return D(e)||o.isBuffer(e)||e&&"object"==typeof e&&"number"==typeof e.length}function O(e){return 16>e?"0"+e.toString(16):e.toString(16)}function q(e){for(var n=[],t=0;t<e.length;t++){var r=e.charCodeAt(t);if(127>=r)n.push(e.charCodeAt(t));else{var o=t;r>=55296&&57343>=r&&t++;for(var i=encodeURIComponent(e.slice(o,t+1)).substr(1).split("%"),s=0;s<i.length;s++)n.push(parseInt(i[s],16))}}return n}function H(e){for(var n=[],t=0;t<e.length;t++)n.push(255&e.charCodeAt(t));return n}function P(e){for(var n,t,r,o=[],i=0;i<e.length;i++)n=e.charCodeAt(i),t=n>>8,r=n%256,o.push(r),o.push(t);return o}function W(e){return G.toByteArray(e)}function R(e,n,t,r){for(var o=0;r>o&&!(o+t>=n.length||o>=e.length);o++)n[o+t]=e[o];return o}function J(e){try{return decodeURIComponent(e)}catch(n){return String.fromCharCode(65533)}}function X(e,n){Z("number"==typeof e,"cannot write a non-number as a number"),Z(e>=0,"specified a negative value for writing an unsigned value"),Z(n>=e,"value is larger than maximum value for type"),Z(Math.floor(e)===e,"value has a fractional component")}function Y(e,n,t){Z("number"==typeof e,"cannot write a non-number as a number"),Z(n>=e,"value larger than maximum allowed value"),Z(e>=t,"value smaller than minimum allowed value"),Z(Math.floor(e)===e,"value has a fractional component")}function V(e,n,t){Z("number"==typeof e,"cannot write a non-number as a number"),Z(n>=e,"value larger than maximum allowed value"),Z(e>=t,"value smaller than minimum allowed value")}function Z(e,n){if(!e)throw new Error(n||"Failed assertion")}var G=e("base64-js"),K=e("ieee754");t.Buffer=o,t.SlowBuffer=o,t.INSPECT_MAX_BYTES=50,o.poolSize=8192,o._useTypedArrays=function(){try{var e=new ArrayBuffer(0),n=new Uint8Array(e);return n.foo=function(){return 42},42===n.foo()&&"function"==typeof n.subarray}catch(t){return!1}}(),o.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"raw":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},o.isBuffer=function(e){return!(null===e||void 0===e||!e._isBuffer)},o.byteLength=function(e,n){var t;switch(e+="",n||"utf8"){case"hex":t=e.length/2;break;case"utf8":case"utf-8":t=q(e).length;break;case"ascii":case"binary":case"raw":t=e.length;break;case"base64":t=W(e).length;break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":t=2*e.length;break;default:throw new Error("Unknown encoding")}return t},o.concat=function(e,n){if(Z(D(e),"Usage: Buffer.concat(list, [totalLength])\nlist should be an Array."),0===e.length)return new o(0);if(1===e.length)return e[0];var t;if("number"!=typeof n)for(n=0,t=0;t<e.length;t++)n+=e[t].length;var r=new o(n),i=0;for(t=0;t<e.length;t++){var s=e[t];s.copy(r,i),i+=s.length}return r},o.prototype.write=function(e,n,t,r){if(isFinite(n))isFinite(t)||(r=t,t=void 0);else{var o=r;r=n,n=t,t=o}n=Number(n)||0;var i=this.length-n;t?(t=Number(t),t>i&&(t=i)):t=i,r=String(r||"utf8").toLowerCase();var s;switch(r){case"hex":s=c(this,e,n,t);break;case"utf8":case"utf-8":s=d(this,e,n,t);break;case"ascii":s=g(this,e,n,t);break;case"binary":s=p(this,e,n,t);break;case"base64":s=h(this,e,n,t);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":s=m(this,e,n,t);break;default:throw new Error("Unknown encoding")}return s},o.prototype.toString=function(e,n,t){var r=this;if(e=String(e||"utf8").toLowerCase(),n=Number(n)||0,t=void 0!==t?Number(t):t=r.length,t===n)return"";var o;switch(e){case"hex":o=A(r,n,t);break;case"utf8":case"utf-8":o=y(r,n,t);break;case"ascii":o=v(r,n,t);break;case"binary":o=b(r,n,t);break;case"base64":o=w(r,n,t);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":o=E(r,n,t);break;default:throw new Error("Unknown encoding")}return o},o.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},o.prototype.copy=function(e,n,t,r){var i=this;if(t||(t=0),r||0===r||(r=this.length),n||(n=0),r!==t&&0!==e.length&&0!==i.length){Z(r>=t,"sourceEnd < sourceStart"),Z(n>=0&&n<e.length,"targetStart out of bounds"),Z(t>=0&&t<i.length,"sourceStart out of bounds"),Z(r>=0&&r<=i.length,"sourceEnd out of bounds"),r>this.length&&(r=this.length),e.length-n<r-t&&(r=e.length-n+t);var s=r-t;if(100>s||!o._useTypedArrays)for(var a=0;s>a;a++)e[a+n]=this[a+t];else e._set(this.subarray(t,t+s),n)}},o.prototype.slice=function(e,n){var t=this.length;if(e=$(e,t,0),n=$(n,t,t),o._useTypedArrays)return o._augment(this.subarray(e,n));for(var r=n-e,i=new o(r,void 0,!0),s=0;r>s;s++)i[s]=this[s+e];return i},o.prototype.get=function(e){return console.log(".get() is deprecated. Access using array indexes instead."),this.readUInt8(e)},o.prototype.set=function(e,n){return console.log(".set() is deprecated. Access using array indexes instead."),this.writeUInt8(e,n)},o.prototype.readUInt8=function(e,n){return n||(Z(void 0!==e&&null!==e,"missing offset"),Z(e<this.length,"Trying to read beyond buffer length")),e>=this.length?void 0:this[e]},o.prototype.readUInt16LE=function(e,n){return C(this,e,!0,n)},o.prototype.readUInt16BE=function(e,n){return C(this,e,!1,n)},o.prototype.readUInt32LE=function(e,n){return B(this,e,!0,n)},o.prototype.readUInt32BE=function(e,n){return B(this,e,!1,n)},o.prototype.readInt8=function(e,n){if(n||(Z(void 0!==e&&null!==e,"missing offset"),Z(e<this.length,"Trying to read beyond buffer length")),!(e>=this.length)){var t=128&this[e];return t?-1*(255-this[e]+1):this[e]}},o.prototype.readInt16LE=function(e,n){return I(this,e,!0,n)},o.prototype.readInt16BE=function(e,n){return I(this,e,!1,n)},o.prototype.readInt32LE=function(e,n){return M(this,e,!0,n)},o.prototype.readInt32BE=function(e,n){return M(this,e,!1,n)},o.prototype.readFloatLE=function(e,n){return _(this,e,!0,n)},o.prototype.readFloatBE=function(e,n){return _(this,e,!1,n)},o.prototype.readDoubleLE=function(e,n){return x(this,e,!0,n)},o.prototype.readDoubleBE=function(e,n){return x(this,e,!1,n)},o.prototype.writeUInt8=function(e,n,t){t||(Z(void 0!==e&&null!==e,"missing value"),Z(void 0!==n&&null!==n,"missing offset"),Z(n<this.length,"trying to write beyond buffer length"),X(e,255)),n>=this.length||(this[n]=e)},o.prototype.writeUInt16LE=function(e,n,t){U(this,e,n,!0,t)},o.prototype.writeUInt16BE=function(e,n,t){U(this,e,n,!1,t)},o.prototype.writeUInt32LE=function(e,n,t){k(this,e,n,!0,t)},o.prototype.writeUInt32BE=function(e,n,t){k(this,e,n,!1,t)},o.prototype.writeInt8=function(e,n,t){t||(Z(void 0!==e&&null!==e,"missing value"),Z(void 0!==n&&null!==n,"missing offset"),Z(n<this.length,"Trying to write beyond buffer length"),Y(e,127,-128)),n>=this.length||(e>=0?this.writeUInt8(e,n,t):this.writeUInt8(255+e+1,n,t))},o.prototype.writeInt16LE=function(e,n,t){S(this,e,n,!0,t)},o.prototype.writeInt16BE=function(e,n,t){S(this,e,n,!1,t)},o.prototype.writeInt32LE=function(e,n,t){L(this,e,n,!0,t)},o.prototype.writeInt32BE=function(e,n,t){L(this,e,n,!1,t)},o.prototype.writeFloatLE=function(e,n,t){j(this,e,n,!0,t)},o.prototype.writeFloatBE=function(e,n,t){j(this,e,n,!1,t)},o.prototype.writeDoubleLE=function(e,n,t){T(this,e,n,!0,t)},o.prototype.writeDoubleBE=function(e,n,t){T(this,e,n,!1,t)},o.prototype.fill=function(e,n,t){if(e||(e=0),n||(n=0),t||(t=this.length),"string"==typeof e&&(e=e.charCodeAt(0)),Z("number"==typeof e&&!isNaN(e),"value is not a number"),Z(t>=n,"end < start"),t!==n&&0!==this.length){Z(n>=0&&n<this.length,"start out of bounds"),Z(t>=0&&t<=this.length,"end out of bounds");for(var r=n;t>r;r++)this[r]=e}},o.prototype.inspect=function(){for(var e=[],n=this.length,r=0;n>r;r++)if(e[r]=O(this[r]),r===t.INSPECT_MAX_BYTES){e[r+1]="...";break}return"<Buffer "+e.join(" ")+">"},o.prototype.toArrayBuffer=function(){if("undefined"!=typeof Uint8Array){if(o._useTypedArrays)return new o(this).buffer;for(var e=new Uint8Array(this.length),n=0,t=e.length;t>n;n+=1)e[n]=this[n];return e.buffer}throw new Error("Buffer.toArrayBuffer not supported in this browser")};var Q=o.prototype;o._augment=function(e){return e._isBuffer=!0,e._get=e.get,e._set=e.set,e.get=Q.get,e.set=Q.set,e.write=Q.write,e.toString=Q.toString,e.toLocaleString=Q.toString,e.toJSON=Q.toJSON,e.copy=Q.copy,e.slice=Q.slice,e.readUInt8=Q.readUInt8,e.readUInt16LE=Q.readUInt16LE,e.readUInt16BE=Q.readUInt16BE,e.readUInt32LE=Q.readUInt32LE,e.readUInt32BE=Q.readUInt32BE,e.readInt8=Q.readInt8,e.readInt16LE=Q.readInt16LE,e.readInt16BE=Q.readInt16BE,e.readInt32LE=Q.readInt32LE,e.readInt32BE=Q.readInt32BE,e.readFloatLE=Q.readFloatLE,e.readFloatBE=Q.readFloatBE,e.readDoubleLE=Q.readDoubleLE,e.readDoubleBE=Q.readDoubleBE,e.writeUInt8=Q.writeUInt8,e.writeUInt16LE=Q.writeUInt16LE,e.writeUInt16BE=Q.writeUInt16BE,e.writeUInt32LE=Q.writeUInt32LE,e.writeUInt32BE=Q.writeUInt32BE,e.writeInt8=Q.writeInt8,e.writeInt16LE=Q.writeInt16LE,e.writeInt16BE=Q.writeInt16BE,e.writeInt32LE=Q.writeInt32LE,e.writeInt32BE=Q.writeInt32BE,e.writeFloatLE=Q.writeFloatLE,e.writeFloatBE=Q.writeFloatBE,e.writeDoubleLE=Q.writeDoubleLE,e.writeDoubleBE=Q.writeDoubleBE,e.fill=Q.fill,e.inspect=Q.inspect,e.toArrayBuffer=Q.toArrayBuffer,e}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/index.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer")},{"base64-js":2,buffer:1,ieee754:3,oMfpAn:4}],2:[function(e,n,t){(function(e,n,r,o,i,s,a,u,f){var l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";!function(e){"use strict";function n(e){var n=e.charCodeAt(0);return n===i||n===c?62:n===s||n===d?63:a>n?-1:a+10>n?n-a+26+26:f+26>n?n-f:u+26>n?n-u+26:void 0}function t(e){function t(e){f[c++]=e}var r,i,s,a,u,f;if(e.length%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var l=e.length;u="="===e.charAt(l-2)?2:"="===e.charAt(l-1)?1:0,f=new o(3*e.length/4-u),s=u>0?e.length-4:e.length;var c=0;for(r=0,i=0;s>r;r+=4,i+=3)a=n(e.charAt(r))<<18|n(e.charAt(r+1))<<12|n(e.charAt(r+2))<<6|n(e.charAt(r+3)),t((16711680&a)>>16),t((65280&a)>>8),t(255&a);return 2===u?(a=n(e.charAt(r))<<2|n(e.charAt(r+1))>>4,t(255&a)):1===u&&(a=n(e.charAt(r))<<10|n(e.charAt(r+1))<<4|n(e.charAt(r+2))>>2,t(a>>8&255),t(255&a)),f}function r(e){function n(e){return l.charAt(e)}function t(e){return n(e>>18&63)+n(e>>12&63)+n(e>>6&63)+n(63&e)}var r,o,i,s=e.length%3,a="";for(r=0,i=e.length-s;i>r;r+=3)o=(e[r]<<16)+(e[r+1]<<8)+e[r+2],a+=t(o);switch(s){case 1:o=e[e.length-1],a+=n(o>>2),a+=n(o<<4&63),a+="==";break;case 2:o=(e[e.length-2]<<8)+e[e.length-1],a+=n(o>>10),a+=n(o>>4&63),a+=n(o<<2&63),a+="="}return a}var o="undefined"!=typeof Uint8Array?Uint8Array:Array,i="+".charCodeAt(0),s="/".charCodeAt(0),a="0".charCodeAt(0),u="a".charCodeAt(0),f="A".charCodeAt(0),c="-".charCodeAt(0),d="_".charCodeAt(0);e.toByteArray=t,e.fromByteArray=r}("undefined"==typeof t?this.base64js={}:t)}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib/b64.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib")},{buffer:1,oMfpAn:4}],3:[function(e,n,t){(function(e,n,r,o,i,s,a,u,f){t.read=function(e,n,t,r,o){var i,s,a=8*o-r-1,u=(1<<a)-1,f=u>>1,l=-7,c=t?o-1:0,d=t?-1:1,g=e[n+c];for(c+=d,i=g&(1<<-l)-1,g>>=-l,l+=a;l>0;i=256*i+e[n+c],c+=d,l-=8);for(s=i&(1<<-l)-1,i>>=-l,l+=r;l>0;s=256*s+e[n+c],c+=d,l-=8);if(0===i)i=1-f;else{if(i===u)return s?NaN:(g?-1:1)*(1/0);s+=Math.pow(2,r),i-=f}return(g?-1:1)*s*Math.pow(2,i-r)},t.write=function(e,n,t,r,o,i){var s,a,u,f=8*i-o-1,l=(1<<f)-1,c=l>>1,d=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,g=r?0:i-1,p=r?1:-1,h=0>n||0===n&&0>1/n?1:0;for(n=Math.abs(n),isNaN(n)||n===1/0?(a=isNaN(n)?1:0,s=l):(s=Math.floor(Math.log(n)/Math.LN2),n*(u=Math.pow(2,-s))<1&&(s--,u*=2),n+=s+c>=1?d/u:d*Math.pow(2,1-c),n*u>=2&&(s++,u/=2),s+c>=l?(a=0,s=l):s+c>=1?(a=(n*u-1)*Math.pow(2,o),s+=c):(a=n*Math.pow(2,c-1)*Math.pow(2,o),s=0));o>=8;e[t+g]=255&a,g+=p,a/=256,o-=8);for(s=s<<o|a,f+=o;f>0;e[t+g]=255&s,g+=p,s/=256,f-=8);e[t+g-p]|=128*h}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/ieee754/index.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/ieee754")},{buffer:1,oMfpAn:4}],4:[function(e,n,t){(function(e,t,r,o,i,s,a,u,f){function l(){}var e=n.exports={};e.nextTick=function(){var e="undefined"!=typeof window&&window.setImmediate,n="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(e)return function(e){return window.setImmediate(e)};if(n){var t=[];return window.addEventListener("message",function(e){var n=e.source;if((n===window||null===n)&&"process-tick"===e.data&&(e.stopPropagation(),t.length>0)){var r=t.shift();r()}},!0),function(e){t.push(e),window.postMessage("process-tick","*")}}return function(e){setTimeout(e,0)}}(),e.title="browser",e.browser=!0,e.env={},e.argv=[],e.on=l,e.addListener=l,e.once=l,e.off=l,e.removeListener=l,e.removeAllListeners=l,e.emit=l,e.binding=function(e){throw new Error("process.binding is not supported")},e.cwd=function(){return"/"},e.chdir=function(e){throw new Error("process.chdir is not supported")}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/process/browser.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/process")},{buffer:1,oMfpAn:4}],5:[function(e,n,t){(function(e,t,r,o,i,s,a,u,f){n.exports=function(e){e.config(["snapRemoteProvider",function(e){e.globalOptions={disable:"left",tapToClose:!0}}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/config/index.js","/config")},{buffer:1,oMfpAn:4}],6:[function(e,n,t){(function(e,t,r,o,i,s,a,u,f){n.exports=function(e){e.constant("commonConstants",{local:"http://192.168.0.120:8011/",production:"http://idemind-api.herokuapp.com/",token:"ae33d6face3d0a8882059e2583725b786c2c4fb96e7c5805b4cdb0590292edfc"})}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/constants/commonConstants.js","/constants")},{buffer:1,oMfpAn:4}],7:[function(e,n,t){(function(t,r,o,i,s,a,u,f,l){var c=angular.module("zsConstants",[]);e("./commonConstants")(c),n.exports=c}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/constants/index.js","/constants")},{"./commonConstants":6,buffer:1,oMfpAn:4}],8:[function(e,n,t){(function(n,t,r,o,i,s,a,u,f){"use strict";e("./constants"),e("./session"),e("./tags"),e("./feed"),e("./home");var l=angular.module("ngZeroStateMobileApp",["ui.router","snap","zsSession","zsHome","zsTags","zsFeed"]);e("./routes")(l),e("./config")(l)}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_74ff43de.js","/")},{"./config":5,"./constants":7,"./feed":11,"./home":13,"./routes":14,"./session":15,"./tags":21,buffer:1,oMfpAn:4}],9:[function(e,n,t){(function(e,t,r,o,i,s,a,u,f){n.exports=function(e){e.controller("feedController",["$scope",function(e){console.log("feed")}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/feed/feedController.js","/feed")},{buffer:1,oMfpAn:4}],10:[function(e,n,t){(function(e,t,r,o,i,s,a,u,f){n.exports=function(e){e.factory("feedFactory",["$http",function(e){}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/feed/feedFactory.js","/feed")},{buffer:1,oMfpAn:4}],11:[function(e,n,t){(function(t,r,o,i,s,a,u,f,l){var c=angular.module("zsFeed",["infinite-scroll"]);e("./feedFactory")(c),e("./feedController")(c),n.exports=c}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/feed/index.js","/feed")},{"./feedController":9,"./feedFactory":10,buffer:1,oMfpAn:4}],12:[function(e,n,t){(function(e,t,r,o,i,s,a,u,f){n.exports=function(e){e.controller("homeController",["$scope","$rootScope","sessionService","localStorageService",function(e,n,t,r){t.authorize(),n.signout=function(){t.removeCurrentUser()},e.test=function(){t.test()}}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/home/homeController.js","/home")},{buffer:1,oMfpAn:4}],13:[function(e,n,t){(function(t,r,o,i,s,a,u,f,l){var c=angular.module("zsHome",[]);e("./homeController")(c),n.exports=c}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/home/index.js","/home")},{"./homeController":12,buffer:1,oMfpAn:4}],14:[function(e,n,t){(function(e,t,r,o,i,s,a,u,f){n.exports=function(e){e.config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,n,t){n.otherwise("/platforms/ios/www/index.html"),e.state("home",{url:"/platforms/ios/www/index.html",templateUrl:"templates/home.html",controller:"homeController"}).state("signin",{templateUrl:"templates/signin.html",controller:"signinController"}).state("signup",{templateUrl:"templates/signup.html",controller:"signupController"})}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/routes/index.js","/routes")},{buffer:1,oMfpAn:4}],15:[function(e,n,t){(function(t,r,o,i,s,a,u,f,l){var c=angular.module("zsSession",["zsConstants","LocalStorageModule"]);e("./sessionService")(c),e("./signinService")(c),e("./signinController")(c),e("./signupService")(c),e("./signupController")(c),n.exports=c}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/session/index.js","/session")},{"./sessionService":16,"./signinController":17,"./signinService":18,"./signupController":19,"./signupService":20,buffer:1,oMfpAn:4}],16:[function(e,n,t){(function(e,t,r,o,i,s,a,u,f){"use strict";n.exports=function(e){e.service("sessionService",["$http","$rootScope","commonConstants","localStorageService",function(e,n,t,r){var o=this;o.authorize=function(){_.isNull(r.get("sessionId"))||e.get(t.production+"auth?sessionId="+o.sessionUser()+"&token="+t.token).then(function(e){o.saveUser(e.data),n.user=o.getCurrentUser(),console.log(n.user)})},o.saveUser=function(e){r.set("email",e.email),r.set("status",!_.isUndefined(e.confirmedEmail)),r.set("sessionId",e.sessionId)},o.getCurrentUser=function(){return{email:r.get("email"),status:r.get("status"),session:r.get("sessionId")}},o.removeCurrentUser=function(){e["delete"](t.production+"auth?sessionId="+o.sessionUser()+"&token="+t.token).then(function(){r.remove("email"),r.remove("status"),r.remove("sessionId"),n.user=null})},o.sessionUser=function(){var e=r.get("sessionId");return _.isNull(e)?"":e}}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/session/sessionService.js","/session")},{buffer:1,oMfpAn:4}],17:[function(e,n,t){(function(e,t,r,o,i,s,a,u,f){"use strict";n.exports=function(e){e.controller("signinController",["$scope","$state","signinService",function(e,n,t){e.submitted=!1,e.submit=function(r,o){return o.$invalid?void(e.submitted=!0):void t.signin(r).then(function(){n.go("home")})["catch"](function(e){})}}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/session/signinController.js","/session")},{buffer:1,oMfpAn:4}],18:[function(e,n,t){(function(e,t,r,o,i,s,a,u,f){"use strict";n.exports=function(e){e.service("signinService",["$http","$q","commonConstants","sessionService",function(e,n,t,r){var o=this;o.signin=function(o){var i=n.defer();return e.get(t.production+"auth?session="+r.sessionUser()+"&token="+t.token+"&email="+o.email+"&password="+o.password).then(function(e){r.saveUser(e.data),i.resolve(o)})["catch"](function(e){i.reject(e)}),i.promise}}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/session/signinService.js","/session")},{buffer:1,oMfpAn:4}],19:[function(e,n,t){(function(e,t,r,o,i,s,a,u,f){n.exports=function(e){e.controller("signupController",["$scope","$state","signupService",function(e,n,t){e.submitted=!1,e.submit=function(r,o){return o.$invalid?void(e.submitted=!0):void t.signup(r).then(function(e){n.go("home")})["catch"](function(){console.log("Something went wrong!")})}}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/session/signupController.js","/session")},{buffer:1,oMfpAn:4}],20:[function(e,n,t){(function(e,t,r,o,i,s,a,u,f){"use strict";n.exports=function(e){e.service("signupService",["$http","$q","commonConstants","sessionService",function(e,n,t,r){var o=this;o.signup=function(o){var i=n.defer();return e.post(t.production+"auth?token="+t.token,o).then(function(e){i.resolve(e),r.saveUser(e.data)})["catch"](function(e){i.reject(e)}),i.promise}}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/session/signupService.js","/session")},{buffer:1,oMfpAn:4}],21:[function(e,n,t){(function(t,r,o,i,s,a,u,f,l){"use strict";var c=angular.module("zsTags",[]);e("./tagsConstants")(c),e("./tagsService")(c),e("./tagsClearInputDirective")(c),e("./tagsTemplate")(c),e("./tagsDirective")(c),e("./tagsController")(c),n.exports=c}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/tags/index.js","/tags")},{"./tagsClearInputDirective":22,"./tagsConstants":23,"./tagsController":24,"./tagsDirective":25,"./tagsService":26,"./tagsTemplate":27,buffer:1,oMfpAn:4}],22:[function(e,n,t){(function(e,t,r,o,i,s,a,u,f){n.exports=function(e){e.directive("clearInput",["$parse",function(e){return{restrict:"A",require:"ngModel",link:function(n,t,r){var o=r.clearBtnMarkup?r.clearBtnMarkup:'<div class="uk-icon-right tm-icon-right-clear uk-icon-clear_inputbox"></div>',i=angular.element(o);i.addClass(r.clearBtnClass?r.clearBtnClass:"clear-btn"),t.after(i),i.on("click",function(t){if(r.clearInput){var o=e(r.clearInput);n.$apply(function(){o(n,{$event:t})})}else n[r.ngModel]=null,n.$digest()}),n.$watch(r.ngModel,function(e){var n=e&&e.length>0;r.clearDisableVisibility||i.css("visibility",n?"visible":"hidden"),n&&!i.hasClass("clear-visible")?i.removeClass("clear-hidden").addClass("clear-visible"):n||i.hasClass("clear-hidden")||i.removeClass("clear-visible").addClass("clear-hidden")})}}}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/tags/tagsClearInputDirective.js","/tags")},{buffer:1,oMfpAn:4}],23:[function(e,n,t){(function(e,t,r,o,i,s,a,u,f){n.exports=function(e){e.constant("tagsConstant",{language:{"default":"EN"},tags:{limit:10}})}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/tags/tagsConstants.js","/tags")},{buffer:1,oMfpAn:4}],24:[function(e,n,t){(function(e,t,r,o,i,s,a,u,f){"use strict";n.exports=function(e){e.controller("tagsController",["$scope","$http","commonConstants",function(e,n,t){e.greeting="D3Tags example";var r=1,o=-1;e.data=[{name:"Новое",power:r},{name:"Модно",power:r},{name:"Стильно",power:r},{name:"Смешно",power:r},{name:"Интересно",power:r},{name:"Вкусно",power:r},{name:"Быстро",power:r},{name:"Красиво",power:r},{name:"Качественно",power:r},{name:"Функционально",power:r},{name:"Грязно",power:o},{name:"Скучно",power:o},{name:"Отвратительно",power:o},{name:"Мерзко",power:o},{name:"Уныло",power:o},{name:"Дорого",power:o},{name:"Кошмарно",power:o},{name:"Грубо",power:o},{name:"Ужасно",power:o},{name:"Безвкусно",power:o}],e.loadTags=function(e,r,o){return _.isUndefined(e)&&(e=""),n.get(t.production+"emotions?cloud=true&name="+e+"&lang_code="+r+"&limit="+o+"&token="+t.token).then(function(e){return _.shuffle(e.data)})},e.clickTag=function(e){console.log(e)},e.hoverTag=function(e){console.log(e)}}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/tags/tagsController.js","/tags")},{buffer:1,oMfpAn:4}],25:[function(e,n,t){(function(e,t,r,o,i,s,a,u,f){"use strict";n.exports=function(e){e.directive("tags",["$window","$timeout","$templateCache","$compile","tagsConstant","tagsService",function(e,n,t,r,o,i){return{restrict:"EA",scope:{source:"&",data:"=",limit:"=",onClick:"&",onHover:"&",onSearch:"&"
},controller:function(e){function n(e,n){_.isUndefined(e)||_.isNull(e)||(e=e.toLowerCase());var t=_.trim(n.text,"# ").toLowerCase();if(_.isEmpty(e))return t;if(e.indexOf(t)>-1)return e;if(!_.isEmpty(e)&&t.indexOf(e)>-1)return t;var r=e.split(",");return r.push(t),_.map(r,function(e){return _.trim(e)}).join(", ")}e.tags=void 0,e.search=function(e){console.log(e)},e.click=function(t){e.$apply(function(){e.tags=n(e.tags,t),e.display()})}},link:function(n,s,a){var u,f,l;u=1==angular.isDefined(n.limit)?n.limit:o.tags.max,f=1==angular.isDefined(n.data)&&1==_.isArray(n.data)?_.shuffle(n.data):[],l=o.language["default"].toLowerCase();var c=d3.select(s[0]).append("svg").style("width","100%").style("height","100%").attr("class","tags"),d=40;c.append("g").attr("class","input"),c.append("g").attr("class","cloud"),e.onresize=i.debouncer(function(e){n.display(),d3.select(".input").selectAll("*").remove(),n.$apply()}),n.render=function(e){function o(e){d3.select(".tags > .cloud").attr("width",f.size()[0]).attr("height",f.size()[1]).append("g").attr("transform","translate("+f.size()[0]/2+","+(f.size()[1]/2+f.size()[1]/4)+")").selectAll("text").data(e).enter().append("text").style("font-size",function(e){return e.size+"px"}).style("font-family","Ubuntu").style("fill",function(e){return e.power>=0?"#ffffff":"#faab9d"}).on("click",function(e){n.click(e),n.onClick({element:e})}).on("mouseover",function(e){n.onHover({element:e})}).style("cursor","pointer").style("font-weight","100").style("opacity",1e-6).transition().duration(1e3).style("opacity",1).attr("text-anchor","middle").attr("transform",function(e){return"translate("+[e.x,e.y]+")rotate("+e.rotate+")"}).text(function(e){return e.text})}function i(e){d3.select(".tags > .cloud").attr("width",l.size()[0]).attr("height",l.size()[1]).append("g").attr("transform","translate("+l.size()[0]/2+","+(l.size()[1]+110)+")").selectAll("text").data(e).enter().append("text").style("font-size",function(e){return e.size+"px"}).style("font-family","Ubuntu").style("fill",function(e){return e.power>=0?"#ffffff":"#faab9d"}).on("click",function(e){n.click(e),n.onClick({element:e})}).on("mouseover",function(e){n.onHover({element:e})}).style("cursor","pointer").style("font-weight","100").style("opacity",1e-6).transition().duration(1e3).style("opacity",1).attr("text-anchor","middle").attr("transform",function(e){return"translate("+[e.x,e.y]+")rotate("+e.rotate+")"}).text(function(e){return e.text})}if(_.isEmpty(e))return void d3.select(".cloud").selectAll("*").remove();e=n.parse(e);var a=s.parent()[0].clientWidth,u=s.parent()[0].clientHeight;d3.select(".cloud").selectAll("*").remove(),0==d3.selectAll("foreignobject")[0].length&&(d3.select(".tags > .input").append("foreignObject").attr("width",a).append("xhtml:body").style("padding-top",u/2-20+"px").attr("class","uk-container-center"),s.find("body").append(r(t.get("cloud-input-template"))(n)));var f=d3.layout.cloud().size([a-d,80]).words(e[0].map(function(e){return{text:"# "+e.name.toUpperCase(),size:12+8*Math.random(),power:e.power}})).padding(10).rotate(function(){return 0}).font("Ubuntu").fontSize(function(e){return e.size}).on("end",o),l=d3.layout.cloud().size([a,80]).words(e[1].map(function(e){return{text:"# "+e.name.toUpperCase(),size:12+8*Math.random(),power:e.power}})).padding(5).rotate(function(){return 0}).font("Ubuntu").fontSize(function(e){return e.size}).on("end",i);f.start(),l.start()},n.$watch(function(){return n.tags},function(e){!_.isUndefined(e)&&_.isNull(e)&&n.display(e)}),n.change=function(e){n.display(e)},n.display=function(e){return _.isUndefined(e)&&(e=""),_.isNull(e)&&(e=""),_.isEmpty(f)?void n.source({text:e,language:l,limit:u}).then(function(e){n.render(e)}):n.render(f)},n.parse=function(e){var n=[],t=_.random(0,1);return 1===e.length?(n[t]=e,t%2>0?n[0]=[]:n[1]=[],n):e.length>o.tags.limit?_.chunk(e,o.tags.limit/2):(n=_.chunk(e,e.length/2),n.length>2&&n[t].push(_.last(n[2])),n)},n.display()}}}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/tags/tagsDirective.js","/tags")},{buffer:1,oMfpAn:4}],26:[function(e,n,t){(function(e,t,r,o,i,s,a,u,f){n.exports=function(e){e.service("tagsService",[function(){var e=this;e.debouncer=function(e,n){var t,n=n||300;return function(){var r=this,o=arguments;clearTimeout(t),t=setTimeout(function(){e.apply(r,Array.prototype.slice.call(o))},n)}}}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/tags/tagsService.js","/tags")},{buffer:1,oMfpAn:4}],27:[function(e,n,t){(function(e,t,r,o,i,s,a,u,f){n.exports=function(e){e.run(["$templateCache",function(e){e.put("cloud-input-template","<form class='uk-form uk-text-center'><div class='uk-form-row uk-width-8-10 uk-container-center'><div class='uk-form-icon cloud-form-icon' style='width: 100%;'><div class='uk-icon-hover uk-icon-hashtag'></div><input type='search' class='uk-form-large tm-form-cloud' ng-model='tags' ng-change='change(tags)' placeholder='How?'  clear-input><div class='uk-icon-right uk-icon-search' ng-click='search(tags)'></div></div></div></form>")}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/tags/tagsTemplate.js","/tags")},{buffer:1,oMfpAn:4}]},{},[8]);
//# sourceMappingURL=data:application/json;base64,
