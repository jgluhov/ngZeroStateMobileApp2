!function e(n,t,r){function o(s,u){if(!t[s]){if(!n[s]){var f="function"==typeof require&&require;if(!u&&f)return f(s,!0);if(i)return i(s,!0);throw new Error("Cannot find module '"+s+"'")}var a=t[s]={exports:{}};n[s][0].call(a.exports,function(e){var t=n[s][1][e];return o(t?t:e)},a,a.exports,e,n,t,r)}return t[s].exports}for(var i="function"==typeof require&&require,s=0;s<r.length;s++)o(r[s]);return o}({1:[function(e,n,t){(function(n,r,o,i,s,u,f,a,l){function o(e,n,t){if(!(this instanceof o))return new o(e,n,t);var r=typeof e;if("base64"===n&&"string"===r)for(e=N(e);e.length%4!==0;)e+="=";var i;if("number"===r)i=D(e);else if("string"===r)i=o.byteLength(e,n);else{if("object"!==r)throw new Error("First argument needs to be a number, array or string.");i=D(e.length)}var s;o._useTypedArrays?s=o._augment(new Uint8Array(i)):(s=this,s.length=i,s._isBuffer=!0);var u;if(o._useTypedArrays&&"number"==typeof e.byteLength)s._set(e);else if(q(e))for(u=0;i>u;u++)o.isBuffer(e)?s[u]=e.readUInt8(u):s[u]=e[u];else if("string"===r)s.write(e,0,n);else if("number"===r&&!o._useTypedArrays&&!t)for(u=0;i>u;u++)s[u]=0;return s}function d(e,n,t,r){t=Number(t)||0;var i=e.length-t;r?(r=Number(r),r>i&&(r=i)):r=i;var s=n.length;G(s%2===0,"Invalid hex string"),r>s/2&&(r=s/2);for(var u=0;r>u;u++){var f=parseInt(n.substr(2*u,2),16);G(!isNaN(f),"Invalid hex string"),e[t+u]=f}return o._charsWritten=2*u,u}function c(e,n,t,r){var i=o._charsWritten=J(z(n),e,t,r);return i}function h(e,n,t,r){var i=o._charsWritten=J(W(n),e,t,r);return i}function g(e,n,t,r){return h(e,n,t,r)}function p(e,n,t,r){var i=o._charsWritten=J(O(n),e,t,r);return i}function m(e,n,t,r){var i=o._charsWritten=J(H(n),e,t,r);return i}function w(e,n,t){return 0===n&&t===e.length?K.fromByteArray(e):K.fromByteArray(e.slice(n,t))}function y(e,n,t){var r="",o="";t=Math.min(e.length,t);for(var i=n;t>i;i++)e[i]<=127?(r+=R(o)+String.fromCharCode(e[i]),o=""):o+="%"+e[i].toString(16);return r+R(o)}function b(e,n,t){var r="";t=Math.min(e.length,t);for(var o=n;t>o;o++)r+=String.fromCharCode(e[o]);return r}function v(e,n,t){return b(e,n,t)}function E(e,n,t){var r=e.length;(!n||0>n)&&(n=0),(!t||0>t||t>r)&&(t=r);for(var o="",i=n;t>i;i++)o+=P(e[i]);return o}function A(e,n,t){for(var r=e.slice(n,t),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function I(e,n,t,r){r||(G("boolean"==typeof t,"missing or invalid endian"),G(void 0!==n&&null!==n,"missing offset"),G(n+1<e.length,"Trying to read beyond buffer length"));var o=e.length;if(!(n>=o)){var i;return t?(i=e[n],o>n+1&&(i|=e[n+1]<<8)):(i=e[n]<<8,o>n+1&&(i|=e[n+1])),i}}function B(e,n,t,r){r||(G("boolean"==typeof t,"missing or invalid endian"),G(void 0!==n&&null!==n,"missing offset"),G(n+3<e.length,"Trying to read beyond buffer length"));var o=e.length;if(!(n>=o)){var i;return t?(o>n+2&&(i=e[n+2]<<16),o>n+1&&(i|=e[n+1]<<8),i|=e[n],o>n+3&&(i+=e[n+3]<<24>>>0)):(o>n+1&&(i=e[n+1]<<16),o>n+2&&(i|=e[n+2]<<8),o>n+3&&(i|=e[n+3]),i+=e[n]<<24>>>0),i}}function _(e,n,t,r){r||(G("boolean"==typeof t,"missing or invalid endian"),G(void 0!==n&&null!==n,"missing offset"),G(n+1<e.length,"Trying to read beyond buffer length"));var o=e.length;if(!(n>=o)){var i=I(e,n,t,!0),s=32768&i;return s?-1*(65535-i+1):i}}function L(e,n,t,r){r||(G("boolean"==typeof t,"missing or invalid endian"),G(void 0!==n&&null!==n,"missing offset"),G(n+3<e.length,"Trying to read beyond buffer length"));var o=e.length;if(!(n>=o)){var i=B(e,n,t,!0),s=2147483648&i;return s?-1*(4294967295-i+1):i}}function C(e,n,t,r){return r||(G("boolean"==typeof t,"missing or invalid endian"),G(n+3<e.length,"Trying to read beyond buffer length")),Q.read(e,n,t,23,4)}function M(e,n,t,r){return r||(G("boolean"==typeof t,"missing or invalid endian"),G(n+7<e.length,"Trying to read beyond buffer length")),Q.read(e,n,t,52,8)}function U(e,n,t,r,o){o||(G(void 0!==n&&null!==n,"missing value"),G("boolean"==typeof r,"missing or invalid endian"),G(void 0!==t&&null!==t,"missing offset"),G(t+1<e.length,"trying to write beyond buffer length"),X(n,65535));var i=e.length;if(!(t>=i))for(var s=0,u=Math.min(i-t,2);u>s;s++)e[t+s]=(n&255<<8*(r?s:1-s))>>>8*(r?s:1-s)}function S(e,n,t,r,o){o||(G(void 0!==n&&null!==n,"missing value"),G("boolean"==typeof r,"missing or invalid endian"),G(void 0!==t&&null!==t,"missing offset"),G(t+3<e.length,"trying to write beyond buffer length"),X(n,4294967295));var i=e.length;if(!(t>=i))for(var s=0,u=Math.min(i-t,4);u>s;s++)e[t+s]=n>>>8*(r?s:3-s)&255}function x(e,n,t,r,o){o||(G(void 0!==n&&null!==n,"missing value"),G("boolean"==typeof r,"missing or invalid endian"),G(void 0!==t&&null!==t,"missing offset"),G(t+1<e.length,"Trying to write beyond buffer length"),Y(n,32767,-32768));var i=e.length;t>=i||(n>=0?U(e,n,t,r,o):U(e,65535+n+1,t,r,o))}function T(e,n,t,r,o){o||(G(void 0!==n&&null!==n,"missing value"),G("boolean"==typeof r,"missing or invalid endian"),G(void 0!==t&&null!==t,"missing offset"),G(t+3<e.length,"Trying to write beyond buffer length"),Y(n,2147483647,-2147483648));var i=e.length;t>=i||(n>=0?S(e,n,t,r,o):S(e,4294967295+n+1,t,r,o))}function k(e,n,t,r,o){o||(G(void 0!==n&&null!==n,"missing value"),G("boolean"==typeof r,"missing or invalid endian"),G(void 0!==t&&null!==t,"missing offset"),G(t+3<e.length,"Trying to write beyond buffer length"),Z(n,3.4028234663852886e38,-3.4028234663852886e38));var i=e.length;t>=i||Q.write(e,n,t,r,23,4)}function j(e,n,t,r,o){o||(G(void 0!==n&&null!==n,"missing value"),G("boolean"==typeof r,"missing or invalid endian"),G(void 0!==t&&null!==t,"missing offset"),G(t+7<e.length,"Trying to write beyond buffer length"),Z(n,1.7976931348623157e308,-1.7976931348623157e308));var i=e.length;t>=i||Q.write(e,n,t,r,52,8)}function N(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function F(e,n,t){return"number"!=typeof e?t:(e=~~e,e>=n?n:e>=0?e:(e+=n,e>=0?e:0))}function D(e){return e=~~Math.ceil(+e),0>e?0:e}function $(e){return(Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)})(e)}function q(e){return $(e)||o.isBuffer(e)||e&&"object"==typeof e&&"number"==typeof e.length}function P(e){return 16>e?"0"+e.toString(16):e.toString(16)}function z(e){for(var n=[],t=0;t<e.length;t++){var r=e.charCodeAt(t);if(127>=r)n.push(e.charCodeAt(t));else{var o=t;r>=55296&&57343>=r&&t++;for(var i=encodeURIComponent(e.slice(o,t+1)).substr(1).split("%"),s=0;s<i.length;s++)n.push(parseInt(i[s],16))}}return n}function W(e){for(var n=[],t=0;t<e.length;t++)n.push(255&e.charCodeAt(t));return n}function H(e){for(var n,t,r,o=[],i=0;i<e.length;i++)n=e.charCodeAt(i),t=n>>8,r=n%256,o.push(r),o.push(t);return o}function O(e){return K.toByteArray(e)}function J(e,n,t,r){for(var o=0;r>o&&!(o+t>=n.length||o>=e.length);o++)n[o+t]=e[o];return o}function R(e){try{return decodeURIComponent(e)}catch(n){return String.fromCharCode(65533)}}function X(e,n){G("number"==typeof e,"cannot write a non-number as a number"),G(e>=0,"specified a negative value for writing an unsigned value"),G(n>=e,"value is larger than maximum value for type"),G(Math.floor(e)===e,"value has a fractional component")}function Y(e,n,t){G("number"==typeof e,"cannot write a non-number as a number"),G(n>=e,"value larger than maximum allowed value"),G(e>=t,"value smaller than minimum allowed value"),G(Math.floor(e)===e,"value has a fractional component")}function Z(e,n,t){G("number"==typeof e,"cannot write a non-number as a number"),G(n>=e,"value larger than maximum allowed value"),G(e>=t,"value smaller than minimum allowed value")}function G(e,n){if(!e)throw new Error(n||"Failed assertion")}var K=e("base64-js"),Q=e("ieee754");t.Buffer=o,t.SlowBuffer=o,t.INSPECT_MAX_BYTES=50,o.poolSize=8192,o._useTypedArrays=function(){try{var e=new ArrayBuffer(0),n=new Uint8Array(e);return n.foo=function(){return 42},42===n.foo()&&"function"==typeof n.subarray}catch(t){return!1}}(),o.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"raw":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},o.isBuffer=function(e){return!(null===e||void 0===e||!e._isBuffer)},o.byteLength=function(e,n){var t;switch(e+="",n||"utf8"){case"hex":t=e.length/2;break;case"utf8":case"utf-8":t=z(e).length;break;case"ascii":case"binary":case"raw":t=e.length;break;case"base64":t=O(e).length;break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":t=2*e.length;break;default:throw new Error("Unknown encoding")}return t},o.concat=function(e,n){if(G($(e),"Usage: Buffer.concat(list, [totalLength])\nlist should be an Array."),0===e.length)return new o(0);if(1===e.length)return e[0];var t;if("number"!=typeof n)for(n=0,t=0;t<e.length;t++)n+=e[t].length;var r=new o(n),i=0;for(t=0;t<e.length;t++){var s=e[t];s.copy(r,i),i+=s.length}return r},o.prototype.write=function(e,n,t,r){if(isFinite(n))isFinite(t)||(r=t,t=void 0);else{var o=r;r=n,n=t,t=o}n=Number(n)||0;var i=this.length-n;t?(t=Number(t),t>i&&(t=i)):t=i,r=String(r||"utf8").toLowerCase();var s;switch(r){case"hex":s=d(this,e,n,t);break;case"utf8":case"utf-8":s=c(this,e,n,t);break;case"ascii":s=h(this,e,n,t);break;case"binary":s=g(this,e,n,t);break;case"base64":s=p(this,e,n,t);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":s=m(this,e,n,t);break;default:throw new Error("Unknown encoding")}return s},o.prototype.toString=function(e,n,t){var r=this;if(e=String(e||"utf8").toLowerCase(),n=Number(n)||0,t=void 0!==t?Number(t):t=r.length,t===n)return"";var o;switch(e){case"hex":o=E(r,n,t);break;case"utf8":case"utf-8":o=y(r,n,t);break;case"ascii":o=b(r,n,t);break;case"binary":o=v(r,n,t);break;case"base64":o=w(r,n,t);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":o=A(r,n,t);break;default:throw new Error("Unknown encoding")}return o},o.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},o.prototype.copy=function(e,n,t,r){var i=this;if(t||(t=0),r||0===r||(r=this.length),n||(n=0),r!==t&&0!==e.length&&0!==i.length){G(r>=t,"sourceEnd < sourceStart"),G(n>=0&&n<e.length,"targetStart out of bounds"),G(t>=0&&t<i.length,"sourceStart out of bounds"),G(r>=0&&r<=i.length,"sourceEnd out of bounds"),r>this.length&&(r=this.length),e.length-n<r-t&&(r=e.length-n+t);var s=r-t;if(100>s||!o._useTypedArrays)for(var u=0;s>u;u++)e[u+n]=this[u+t];else e._set(this.subarray(t,t+s),n)}},o.prototype.slice=function(e,n){var t=this.length;if(e=F(e,t,0),n=F(n,t,t),o._useTypedArrays)return o._augment(this.subarray(e,n));for(var r=n-e,i=new o(r,void 0,!0),s=0;r>s;s++)i[s]=this[s+e];return i},o.prototype.get=function(e){return console.log(".get() is deprecated. Access using array indexes instead."),this.readUInt8(e)},o.prototype.set=function(e,n){return console.log(".set() is deprecated. Access using array indexes instead."),this.writeUInt8(e,n)},o.prototype.readUInt8=function(e,n){return n||(G(void 0!==e&&null!==e,"missing offset"),G(e<this.length,"Trying to read beyond buffer length")),e>=this.length?void 0:this[e]},o.prototype.readUInt16LE=function(e,n){return I(this,e,!0,n)},o.prototype.readUInt16BE=function(e,n){return I(this,e,!1,n)},o.prototype.readUInt32LE=function(e,n){return B(this,e,!0,n)},o.prototype.readUInt32BE=function(e,n){return B(this,e,!1,n)},o.prototype.readInt8=function(e,n){if(n||(G(void 0!==e&&null!==e,"missing offset"),G(e<this.length,"Trying to read beyond buffer length")),!(e>=this.length)){var t=128&this[e];return t?-1*(255-this[e]+1):this[e]}},o.prototype.readInt16LE=function(e,n){return _(this,e,!0,n)},o.prototype.readInt16BE=function(e,n){return _(this,e,!1,n)},o.prototype.readInt32LE=function(e,n){return L(this,e,!0,n)},o.prototype.readInt32BE=function(e,n){return L(this,e,!1,n)},o.prototype.readFloatLE=function(e,n){return C(this,e,!0,n)},o.prototype.readFloatBE=function(e,n){return C(this,e,!1,n)},o.prototype.readDoubleLE=function(e,n){return M(this,e,!0,n)},o.prototype.readDoubleBE=function(e,n){return M(this,e,!1,n)},o.prototype.writeUInt8=function(e,n,t){t||(G(void 0!==e&&null!==e,"missing value"),G(void 0!==n&&null!==n,"missing offset"),G(n<this.length,"trying to write beyond buffer length"),X(e,255)),n>=this.length||(this[n]=e)},o.prototype.writeUInt16LE=function(e,n,t){U(this,e,n,!0,t)},o.prototype.writeUInt16BE=function(e,n,t){U(this,e,n,!1,t)},o.prototype.writeUInt32LE=function(e,n,t){S(this,e,n,!0,t)},o.prototype.writeUInt32BE=function(e,n,t){S(this,e,n,!1,t)},o.prototype.writeInt8=function(e,n,t){t||(G(void 0!==e&&null!==e,"missing value"),G(void 0!==n&&null!==n,"missing offset"),G(n<this.length,"Trying to write beyond buffer length"),Y(e,127,-128)),n>=this.length||(e>=0?this.writeUInt8(e,n,t):this.writeUInt8(255+e+1,n,t))},o.prototype.writeInt16LE=function(e,n,t){x(this,e,n,!0,t)},o.prototype.writeInt16BE=function(e,n,t){x(this,e,n,!1,t)},o.prototype.writeInt32LE=function(e,n,t){T(this,e,n,!0,t)},o.prototype.writeInt32BE=function(e,n,t){T(this,e,n,!1,t)},o.prototype.writeFloatLE=function(e,n,t){k(this,e,n,!0,t)},o.prototype.writeFloatBE=function(e,n,t){k(this,e,n,!1,t)},o.prototype.writeDoubleLE=function(e,n,t){j(this,e,n,!0,t)},o.prototype.writeDoubleBE=function(e,n,t){j(this,e,n,!1,t)},o.prototype.fill=function(e,n,t){if(e||(e=0),n||(n=0),t||(t=this.length),"string"==typeof e&&(e=e.charCodeAt(0)),G("number"==typeof e&&!isNaN(e),"value is not a number"),G(t>=n,"end < start"),t!==n&&0!==this.length){G(n>=0&&n<this.length,"start out of bounds"),G(t>=0&&t<=this.length,"end out of bounds");for(var r=n;t>r;r++)this[r]=e}},o.prototype.inspect=function(){for(var e=[],n=this.length,r=0;n>r;r++)if(e[r]=P(this[r]),r===t.INSPECT_MAX_BYTES){e[r+1]="...";break}return"<Buffer "+e.join(" ")+">"},o.prototype.toArrayBuffer=function(){if("undefined"!=typeof Uint8Array){if(o._useTypedArrays)return new o(this).buffer;for(var e=new Uint8Array(this.length),n=0,t=e.length;t>n;n+=1)e[n]=this[n];return e.buffer}throw new Error("Buffer.toArrayBuffer not supported in this browser")};var V=o.prototype;o._augment=function(e){return e._isBuffer=!0,e._get=e.get,e._set=e.set,e.get=V.get,e.set=V.set,e.write=V.write,e.toString=V.toString,e.toLocaleString=V.toString,e.toJSON=V.toJSON,e.copy=V.copy,e.slice=V.slice,e.readUInt8=V.readUInt8,e.readUInt16LE=V.readUInt16LE,e.readUInt16BE=V.readUInt16BE,e.readUInt32LE=V.readUInt32LE,e.readUInt32BE=V.readUInt32BE,e.readInt8=V.readInt8,e.readInt16LE=V.readInt16LE,e.readInt16BE=V.readInt16BE,e.readInt32LE=V.readInt32LE,e.readInt32BE=V.readInt32BE,e.readFloatLE=V.readFloatLE,e.readFloatBE=V.readFloatBE,e.readDoubleLE=V.readDoubleLE,e.readDoubleBE=V.readDoubleBE,e.writeUInt8=V.writeUInt8,e.writeUInt16LE=V.writeUInt16LE,e.writeUInt16BE=V.writeUInt16BE,e.writeUInt32LE=V.writeUInt32LE,e.writeUInt32BE=V.writeUInt32BE,e.writeInt8=V.writeInt8,e.writeInt16LE=V.writeInt16LE,e.writeInt16BE=V.writeInt16BE,e.writeInt32LE=V.writeInt32LE,e.writeInt32BE=V.writeInt32BE,e.writeFloatLE=V.writeFloatLE,e.writeFloatBE=V.writeFloatBE,e.writeDoubleLE=V.writeDoubleLE,e.writeDoubleBE=V.writeDoubleBE,e.fill=V.fill,e.inspect=V.inspect,e.toArrayBuffer=V.toArrayBuffer,e}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/index.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer")},{"base64-js":2,buffer:1,ieee754:3,oMfpAn:4}],2:[function(e,n,t){(function(e,n,r,o,i,s,u,f,a){var l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";!function(e){"use strict";function n(e){var n=e.charCodeAt(0);return n===i||n===d?62:n===s||n===c?63:u>n?-1:u+10>n?n-u+26+26:a+26>n?n-a:f+26>n?n-f+26:void 0}function t(e){function t(e){a[d++]=e}var r,i,s,u,f,a;if(e.length%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var l=e.length;f="="===e.charAt(l-2)?2:"="===e.charAt(l-1)?1:0,a=new o(3*e.length/4-f),s=f>0?e.length-4:e.length;var d=0;for(r=0,i=0;s>r;r+=4,i+=3)u=n(e.charAt(r))<<18|n(e.charAt(r+1))<<12|n(e.charAt(r+2))<<6|n(e.charAt(r+3)),t((16711680&u)>>16),t((65280&u)>>8),t(255&u);return 2===f?(u=n(e.charAt(r))<<2|n(e.charAt(r+1))>>4,t(255&u)):1===f&&(u=n(e.charAt(r))<<10|n(e.charAt(r+1))<<4|n(e.charAt(r+2))>>2,t(u>>8&255),t(255&u)),a}function r(e){function n(e){return l.charAt(e)}function t(e){return n(e>>18&63)+n(e>>12&63)+n(e>>6&63)+n(63&e)}var r,o,i,s=e.length%3,u="";for(r=0,i=e.length-s;i>r;r+=3)o=(e[r]<<16)+(e[r+1]<<8)+e[r+2],u+=t(o);switch(s){case 1:o=e[e.length-1],u+=n(o>>2),u+=n(o<<4&63),u+="==";break;case 2:o=(e[e.length-2]<<8)+e[e.length-1],u+=n(o>>10),u+=n(o>>4&63),u+=n(o<<2&63),u+="="}return u}var o="undefined"!=typeof Uint8Array?Uint8Array:Array,i="+".charCodeAt(0),s="/".charCodeAt(0),u="0".charCodeAt(0),f="a".charCodeAt(0),a="A".charCodeAt(0),d="-".charCodeAt(0),c="_".charCodeAt(0);e.toByteArray=t,e.fromByteArray=r}("undefined"==typeof t?this.base64js={}:t)}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib/b64.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib")},{buffer:1,oMfpAn:4}],3:[function(e,n,t){(function(e,n,r,o,i,s,u,f,a){t.read=function(e,n,t,r,o){var i,s,u=8*o-r-1,f=(1<<u)-1,a=f>>1,l=-7,d=t?o-1:0,c=t?-1:1,h=e[n+d];for(d+=c,i=h&(1<<-l)-1,h>>=-l,l+=u;l>0;i=256*i+e[n+d],d+=c,l-=8);for(s=i&(1<<-l)-1,i>>=-l,l+=r;l>0;s=256*s+e[n+d],d+=c,l-=8);if(0===i)i=1-a;else{if(i===f)return s?NaN:(h?-1:1)*(1/0);s+=Math.pow(2,r),i-=a}return(h?-1:1)*s*Math.pow(2,i-r)},t.write=function(e,n,t,r,o,i){var s,u,f,a=8*i-o-1,l=(1<<a)-1,d=l>>1,c=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:i-1,g=r?1:-1,p=0>n||0===n&&0>1/n?1:0;for(n=Math.abs(n),isNaN(n)||n===1/0?(u=isNaN(n)?1:0,s=l):(s=Math.floor(Math.log(n)/Math.LN2),n*(f=Math.pow(2,-s))<1&&(s--,f*=2),n+=s+d>=1?c/f:c*Math.pow(2,1-d),n*f>=2&&(s++,f/=2),s+d>=l?(u=0,s=l):s+d>=1?(u=(n*f-1)*Math.pow(2,o),s+=d):(u=n*Math.pow(2,d-1)*Math.pow(2,o),s=0));o>=8;e[t+h]=255&u,h+=g,u/=256,o-=8);for(s=s<<o|u,a+=o;a>0;e[t+h]=255&s,h+=g,s/=256,a-=8);e[t+h-g]|=128*p}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/ieee754/index.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/ieee754")},{buffer:1,oMfpAn:4}],4:[function(e,n,t){(function(e,t,r,o,i,s,u,f,a){function l(){}var e=n.exports={};e.nextTick=function(){var e="undefined"!=typeof window&&window.setImmediate,n="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(e)return function(e){return window.setImmediate(e)};if(n){var t=[];return window.addEventListener("message",function(e){var n=e.source;if((n===window||null===n)&&"process-tick"===e.data&&(e.stopPropagation(),t.length>0)){var r=t.shift();r()}},!0),function(e){t.push(e),window.postMessage("process-tick","*")}}return function(e){setTimeout(e,0)}}(),e.title="browser",e.browser=!0,e.env={},e.argv=[],e.on=l,e.addListener=l,e.once=l,e.off=l,e.removeListener=l,e.removeAllListeners=l,e.emit=l,e.binding=function(e){throw new Error("process.binding is not supported")},e.cwd=function(){return"/"},e.chdir=function(e){throw new Error("process.chdir is not supported")}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/process/browser.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/process")},{buffer:1,oMfpAn:4}],5:[function(e,n,t){(function(e,t,r,o,i,s,u,f,a){n.exports=function(e){e.service("CordovaService",["$document","$q",function(e,n){var t=n.defer(),r=!1;this.ready=t.promise,document.addEventListener("deviceready",function(){r=!0,t.resolve(window.cordova)}),setTimeout(function(){r||window.cordova&&t.resolve(window.cordova)},3e3)}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/cordova/index.js","/cordova")},{buffer:1,oMfpAn:4}],6:[function(e,n,t){(function(n,t,r,o,i,s,u,f,a){"use strict";e("./session"),e("./home");var l=angular.module("ngZeroStateMobileApp",["ui.router","snap","zsSession","zsHome"]);e("./routes")(l),e("./cordova")(l)}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_521cc17c.js","/")},{"./cordova":5,"./home":8,"./routes":9,"./session":10,buffer:1,oMfpAn:4}],7:[function(e,n,t){(function(e,t,r,o,i,s,u,f,a){n.exports=function(e){e.controller("homeController",["$scope","CordovaService",function(e,n){n.ready.then(function(){console.log("homeController")})}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/home/homeController.js","/home")},{buffer:1,oMfpAn:4}],8:[function(e,n,t){(function(t,r,o,i,s,u,f,a,l){var d=angular.module("zsHome",[]);e("./homeController")(d),n.exports=d}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/home/index.js","/home")},{"./homeController":7,buffer:1,oMfpAn:4}],9:[function(e,n,t){(function(e,t,r,o,i,s,u,f,a){n.exports=function(e){e.config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,n,t){t.html5Mode({enabled:!0,requireBase:!1}),n.otherwise("/platforms/ios/www/index.html"),e.state("home",{url:"/platforms/ios/www/index.html",templateUrl:"templates/home.html",controller:"homeController"}).state("signin",{templateUrl:"templates/signin.html",controller:"signinController"}).state("signup",{templateUrl:"templates/signup.html",controller:"signupController"})}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/routes/index.js","/routes")},{buffer:1,oMfpAn:4}],10:[function(e,n,t){(function(t,r,o,i,s,u,f,a,l){var d=angular.module("zsSession",[]);e("./signinController")(d),e("./signupController")(d),n.exports=d}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/session/index.js","/session")},{"./signinController":11,"./signupController":12,buffer:1,oMfpAn:4}],11:[function(e,n,t){(function(e,t,r,o,i,s,u,f,a){n.exports=function(e){e.controller("signinController",["$scope","CordovaService",function(e,n){n.ready.then(function(){console.log("HelloSigninController")})}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/session/signinController.js","/session")},{buffer:1,oMfpAn:4}],12:[function(e,n,t){(function(e,t,r,o,i,s,u,f,a){n.exports=function(e){e.controller("signupController",["$scope","CordovaService",function(e,n){n.ready.then(function(){console.log("HelloSignupController")})}])}}).call(this,e("oMfpAn"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/session/signupController.js","/session")},{buffer:1,oMfpAn:4}]},{},[6]);
//# sourceMappingURL=data:application/json;base64,
